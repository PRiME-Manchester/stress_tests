
stress_test.elf:     file format elf32-littlearm
stress_test.elf
architecture: armv5te, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00008000 vaddr 0x00000000 paddr 0x00000000 align 2**15
         filesz 0x00000b97 memsz 0x00000b97 flags r-x
    LOAD off    0x00010000 vaddr 0x00400000 paddr 0x00400000 align 2**15
         filesz 0x00000000 memsz 0x0000068c flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 RO_DATA       00000b97  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 ZI_DATA       0000068c  00400000  00400000  00010000  2**2
                  ALLOC
  2 .comment      00000030  00000000  00000000  00008b97  2**0
                  CONTENTS, READONLY
  3 .ARM.attributes 00000027  00000000  00000000  00008bc7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  RO_DATA	00000000 RO_DATA
00400000 l    d  ZI_DATA	00000000 ZI_DATA
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    df *ABS*	00000000 sark_alib.o
00000001 l       *ABS*	00000000 GNU
00000000 l       *ABS*	00000000 NULL
80000000 l       *ABS*	00000000 BIT_31
00000001 l       *ABS*	00000000 BUF_WRITE
00000012 l       *ABS*	00000000 NUM_CPUS
00000006 l       *ABS*	00000000 NUM_LINKS
00000000 l       *ABS*	00000000 ITCM_BASE
00008000 l       *ABS*	00000000 ITCM_SIZE
00008000 l       *ABS*	00000000 ITCM_TOP
00400000 l       *ABS*	00000000 DTCM_BASE
00010000 l       *ABS*	00000000 DTCM_SIZE
00410000 l       *ABS*	00000000 DTCM_TOP
70000000 l       *ABS*	00000000 SDRAM_BASE_UNBUF
60000000 l       *ABS*	00000000 SDRAM_BASE_BUF
60000000 l       *ABS*	00000000 SDRAM_BASE
08000000 l       *ABS*	00000000 SDRAM_SIZE
68000000 l       *ABS*	00000000 SDRAM_TOP
f5000000 l       *ABS*	00000000 SYSRAM_BASE_UNBUF
e5000000 l       *ABS*	00000000 SYSRAM_BASE_BUF
e5000000 l       *ABS*	00000000 SYSRAM_BASE
00008000 l       *ABS*	00000000 SYSRAM_SIZE
e5008000 l       *ABS*	00000000 SYSRAM_TOP
f6000000 l       *ABS*	00000000 ROM_BASE
00008000 l       *ABS*	00000000 ROM_SIZE
f6008000 l       *ABS*	00000000 ROM_TOP
10000000 l       *ABS*	00000000 CC_BASE_UNBUF
20000000 l       *ABS*	00000000 CC_BASE_BUF
20000000 l       *ABS*	00000000 CC_BASE
00000000 l       *ABS*	00000000 CC_TCR
00000004 l       *ABS*	00000000 CC_TXDATA
00000008 l       *ABS*	00000000 CC_TXKEY
0000000c l       *ABS*	00000000 CC_RSR
00000010 l       *ABS*	00000000 CC_RXDATA
00000014 l       *ABS*	00000000 CC_RXKEY
00000018 l       *ABS*	00000000 CC_SAR
0000001c l       *ABS*	00000000 CC_TEST
11000000 l       *ABS*	00000000 TIMER_BASE_UNBUF
21000000 l       *ABS*	00000000 TIMER_BASE_BUF
21000000 l       *ABS*	00000000 TIMER_BASE
00000020 l       *ABS*	00000000 TIMER_OFFSET
21000000 l       *ABS*	00000000 TIMER1_BASE
21000020 l       *ABS*	00000000 TIMER2_BASE
00000000 l       *ABS*	00000000 TC_LOAD
00000004 l       *ABS*	00000000 TC_COUNT
00000008 l       *ABS*	00000000 TC_CONTROL
0000000c l       *ABS*	00000000 TC_INT_CLR
00000010 l       *ABS*	00000000 TC_RAW_INT
00000014 l       *ABS*	00000000 TC_MASK_INT
00000018 l       *ABS*	00000000 TC_BG_LOAD
00000000 l       *ABS*	00000000 T1_LOAD
00000004 l       *ABS*	00000000 T1_COUNT
00000008 l       *ABS*	00000000 T1_CONTROL
0000000c l       *ABS*	00000000 T1_INT_CLR
00000010 l       *ABS*	00000000 T1_RAW_INT
00000014 l       *ABS*	00000000 T1_MASK_INT
00000018 l       *ABS*	00000000 T1_BG_LOAD
00000020 l       *ABS*	00000000 T2_LOAD
00000024 l       *ABS*	00000000 T2_COUNT
00000028 l       *ABS*	00000000 T2_CONTROL
0000002c l       *ABS*	00000000 T2_INT_CLR
00000030 l       *ABS*	00000000 T2_RAW_INT
00000034 l       *ABS*	00000000 T2_MASK_INT
00000038 l       *ABS*	00000000 T2_BG_LOAD
1f000000 l       *ABS*	00000000 VIC_BASE_UNBUF
2f000000 l       *ABS*	00000000 VIC_BASE_BUF
2f000000 l       *ABS*	00000000 VIC_BASE
00000000 l       *ABS*	00000000 VIC_IRQST
00000004 l       *ABS*	00000000 VIC_FIQST
00000008 l       *ABS*	00000000 VIC_RAW
0000000c l       *ABS*	00000000 VIC_SELECT
00000010 l       *ABS*	00000000 VIC_ENABLE
00000014 l       *ABS*	00000000 VIC_DISABLE
00000018 l       *ABS*	00000000 VIC_SOFT_SET
0000001c l       *ABS*	00000000 VIC_SOFT_CLR
00000020 l       *ABS*	00000000 VIC_PROTECT
00000030 l       *ABS*	00000000 VIC_VADDR
00000034 l       *ABS*	00000000 VIC_DEFADDR
00000100 l       *ABS*	00000000 VIC_ADDR
00000100 l       *ABS*	00000000 VIC_ADDR0
00000104 l       *ABS*	00000000 VIC_ADDR1
00000108 l       *ABS*	00000000 VIC_ADDR2
0000010c l       *ABS*	00000000 VIC_ADDR3
00000110 l       *ABS*	00000000 VIC_ADDR4
00000114 l       *ABS*	00000000 VIC_ADDR5
00000118 l       *ABS*	00000000 VIC_ADDR6
0000011c l       *ABS*	00000000 VIC_ADDR7
00000120 l       *ABS*	00000000 VIC_ADDR8
00000124 l       *ABS*	00000000 VIC_ADDR9
00000128 l       *ABS*	00000000 VIC_ADDR10
0000012c l       *ABS*	00000000 VIC_ADDR11
00000130 l       *ABS*	00000000 VIC_ADDR12
00000134 l       *ABS*	00000000 VIC_ADDR13
00000138 l       *ABS*	00000000 VIC_ADDR14
0000013c l       *ABS*	00000000 VIC_ADDR15
00000200 l       *ABS*	00000000 VIC_CNTL
00000200 l       *ABS*	00000000 VIC_CNTL0
00000204 l       *ABS*	00000000 VIC_CNTL1
00000208 l       *ABS*	00000000 VIC_CNTL2
0000020c l       *ABS*	00000000 VIC_CNTL3
00000210 l       *ABS*	00000000 VIC_CNTL4
00000214 l       *ABS*	00000000 VIC_CNTL5
00000218 l       *ABS*	00000000 VIC_CNTL6
0000021c l       *ABS*	00000000 VIC_CNTL7
00000220 l       *ABS*	00000000 VIC_CNTL8
00000224 l       *ABS*	00000000 VIC_CNTL9
00000228 l       *ABS*	00000000 VIC_CNTL10
0000022c l       *ABS*	00000000 VIC_CNTL11
00000230 l       *ABS*	00000000 VIC_CNTL12
00000234 l       *ABS*	00000000 VIC_CNTL13
00000238 l       *ABS*	00000000 VIC_CNTL14
0000023c l       *ABS*	00000000 VIC_CNTL15
00000000 l       *ABS*	00000000 WDOG_INT
00000001 l       *ABS*	00000000 SOFTWARE_INT
00000002 l       *ABS*	00000000 COMM_RX_INT
00000003 l       *ABS*	00000000 COMM_TX_INT
00000004 l       *ABS*	00000000 TIMER1_INT
00000005 l       *ABS*	00000000 TIMER2_INT
00000006 l       *ABS*	00000000 CC_RDY_INT
00000007 l       *ABS*	00000000 CC_RPE_INT
00000008 l       *ABS*	00000000 CC_RFE_INT
00000009 l       *ABS*	00000000 CC_TFL_INT
0000000a l       *ABS*	00000000 CC_TOV_INT
0000000b l       *ABS*	00000000 CC_TMT_INT
0000000c l       *ABS*	00000000 DMA_DONE_INT
0000000d l       *ABS*	00000000 DMA_ERR_INT
0000000e l       *ABS*	00000000 DMA_TO_INT
0000000f l       *ABS*	00000000 RTR_DIAG_INT
00000010 l       *ABS*	00000000 RTR_DUMP_INT
00000011 l       *ABS*	00000000 RTR_ERR_INT
00000012 l       *ABS*	00000000 CPU_INT
00000013 l       *ABS*	00000000 ETH_TX_INT
00000014 l       *ABS*	00000000 ETH_RX_INT
00000015 l       *ABS*	00000000 ETH_PHY_INT
00000016 l       *ABS*	00000000 SLOW_CLK_INT
00000017 l       *ABS*	00000000 CC_TNF_INT
00000018 l       *ABS*	00000000 CC_MC_INT
00000019 l       *ABS*	00000000 CC_P2P_INT
0000001a l       *ABS*	00000000 CC_NN_INT
0000001b l       *ABS*	00000000 CC_FR_INT
0000001c l       *ABS*	00000000 INT0_INT
0000001d l       *ABS*	00000000 INT1_INT
0000001e l       *ABS*	00000000 GPIO8_INT
0000001f l       *ABS*	00000000 GPIO9_INT
30000000 l       *ABS*	00000000 DMA_BASE_UNBUF
40000000 l       *ABS*	00000000 DMA_BASE_BUF
40000000 l       *ABS*	00000000 DMA_BASE
00000004 l       *ABS*	00000000 DMA_ADRS
00000008 l       *ABS*	00000000 DMA_ADRT
0000000c l       *ABS*	00000000 DMA_DESC
00000010 l       *ABS*	00000000 DMA_CTRL
00000014 l       *ABS*	00000000 DMA_STAT
00000018 l       *ABS*	00000000 DMA_GCTL
0000001c l       *ABS*	00000000 DMA_CRCC
00000020 l       *ABS*	00000000 DMA_CRCR
00000024 l       *ABS*	00000000 DMA_TMTV
00000028 l       *ABS*	00000000 DMA_SCTL
00000040 l       *ABS*	00000000 DMA_STAT0
00000044 l       *ABS*	00000000 DMA_STAT1
00000048 l       *ABS*	00000000 DMA_STAT2
0000004c l       *ABS*	00000000 DMA_STAT3
00000050 l       *ABS*	00000000 DMA_STAT4
00000054 l       *ABS*	00000000 DMA_STAT5
00000058 l       *ABS*	00000000 DMA_STAT6
0000005c l       *ABS*	00000000 DMA_STAT7
00000104 l       *ABS*	00000000 DMA_AD2S
00000108 l       *ABS*	00000000 DMA_AD2T
0000010c l       *ABS*	00000000 DMA_DES2
00000180 l       *ABS*	00000000 DMA_CRCT
f0000000 l       *ABS*	00000000 PL340_BASE_UNBUF
e0000000 l       *ABS*	00000000 PL340_BASE_BUF
e0000000 l       *ABS*	00000000 PL340_BASE
00000000 l       *ABS*	00000000 MC_STAT
00000004 l       *ABS*	00000000 MC_CMD
00000008 l       *ABS*	00000000 MC_DIRC
0000000c l       *ABS*	00000000 MC_MCFG
00000010 l       *ABS*	00000000 MC_REFP
00000014 l       *ABS*	00000000 MC_CASL
00000018 l       *ABS*	00000000 MC_DQSS
0000001c l       *ABS*	00000000 MC_MRD
00000020 l       *ABS*	00000000 MC_RAS
00000024 l       *ABS*	00000000 MC_RC
00000028 l       *ABS*	00000000 MC_RCD
0000002c l       *ABS*	00000000 MC_RFC
00000030 l       *ABS*	00000000 MC_RP
00000034 l       *ABS*	00000000 MC_RRD
00000038 l       *ABS*	00000000 MC_WR
0000003c l       *ABS*	00000000 MC_WTR
00000040 l       *ABS*	00000000 MC_XP
00000044 l       *ABS*	00000000 MC_XSR
00000048 l       *ABS*	00000000 MC_ESR
0000004c l       *ABS*	00000000 MC_MCFG2
00000050 l       *ABS*	00000000 MC_MCFG3
00000100 l       *ABS*	00000000 MC_QOS0
00000104 l       *ABS*	00000000 MC_QOS1
00000108 l       *ABS*	00000000 MC_QOS2
0000010c l       *ABS*	00000000 MC_QOS3
00000110 l       *ABS*	00000000 MC_QOS4
00000114 l       *ABS*	00000000 MC_QOS5
00000118 l       *ABS*	00000000 MC_QOS6
0000011c l       *ABS*	00000000 MC_QOS7
00000120 l       *ABS*	00000000 MC_QOS8
00000124 l       *ABS*	00000000 MC_QOS9
00000128 l       *ABS*	00000000 MC_QOS10
0000012c l       *ABS*	00000000 MC_QOS11
00000130 l       *ABS*	00000000 MC_QOS12
00000134 l       *ABS*	00000000 MC_QOS13
00000138 l       *ABS*	00000000 MC_QOS14
0000013c l       *ABS*	00000000 MC_QOS15
00000200 l       *ABS*	00000000 MC_CCFG0
00000204 l       *ABS*	00000000 MC_CCFG1
00000208 l       *ABS*	00000000 MC_CCFG2
0000020c l       *ABS*	00000000 MC_CCFG3
00000300 l       *ABS*	00000000 DLL_STATUS
00000304 l       *ABS*	00000000 DLL_CONFIG0
00000308 l       *ABS*	00000000 DLL_CONFIG1
f1000000 l       *ABS*	00000000 RTR_BASE_UNBUF
e1000000 l       *ABS*	00000000 RTR_BASE_BUF
e1000000 l       *ABS*	00000000 RTR_BASE
00000000 l       *ABS*	00000000 RTR_CONTROL
00000004 l       *ABS*	00000000 RTR_STATUS
00000008 l       *ABS*	00000000 RTR_EHDR
0000000c l       *ABS*	00000000 RTR_EKEY
00000010 l       *ABS*	00000000 RTR_EDAT
00000014 l       *ABS*	00000000 RTR_ESTAT
00000018 l       *ABS*	00000000 RTR_DHDR
0000001c l       *ABS*	00000000 RTR_DKEY
00000020 l       *ABS*	00000000 RTR_DDAT
00000024 l       *ABS*	00000000 RTR_DLINK
00000028 l       *ABS*	00000000 RTR_DSTAT
0000002c l       *ABS*	00000000 RTR_DGEN
00000200 l       *ABS*	00000000 RTR_DGF0
00000204 l       *ABS*	00000000 RTR_DGF1
00000208 l       *ABS*	00000000 RTR_DGF2
0000020c l       *ABS*	00000000 RTR_DGF3
00000210 l       *ABS*	00000000 RTR_DGF4
00000214 l       *ABS*	00000000 RTR_DGF5
00000218 l       *ABS*	00000000 RTR_DGF6
0000021c l       *ABS*	00000000 RTR_DGF7
00000220 l       *ABS*	00000000 RTR_DGF8
00000224 l       *ABS*	00000000 RTR_DGF9
00000228 l       *ABS*	00000000 RTR_DGF10
0000022c l       *ABS*	00000000 RTR_DGF11
00000230 l       *ABS*	00000000 RTR_DGF12
00000234 l       *ABS*	00000000 RTR_DGF13
00000238 l       *ABS*	00000000 RTR_DGF14
0000023c l       *ABS*	00000000 RTR_DGF15
00000300 l       *ABS*	00000000 RTR_DGC0
00000304 l       *ABS*	00000000 RTR_DGC1
00000308 l       *ABS*	00000000 RTR_DGC2
0000030c l       *ABS*	00000000 RTR_DGC3
00000310 l       *ABS*	00000000 RTR_DGC4
00000314 l       *ABS*	00000000 RTR_DGC5
00000318 l       *ABS*	00000000 RTR_DGC6
0000031c l       *ABS*	00000000 RTR_DGC7
00000320 l       *ABS*	00000000 RTR_DGC8
00000324 l       *ABS*	00000000 RTR_DGC9
00000328 l       *ABS*	00000000 RTR_DGC10
0000032c l       *ABS*	00000000 RTR_DGC11
00000330 l       *ABS*	00000000 RTR_DGC12
00000334 l       *ABS*	00000000 RTR_DGC13
00000338 l       *ABS*	00000000 RTR_DGC14
0000033c l       *ABS*	00000000 RTR_DGC15
00000f00 l       *ABS*	00000000 RTR_TST1
00000f04 l       *ABS*	00000000 RTR_TST2
00002000 l       *ABS*	00000000 P2P_TABLE_SIZE
00000400 l       *ABS*	00000000 MC_TABLE_SIZE
00000018 l       *ABS*	00000000 MC_RAM_WIDTH
00ffffff l       *ABS*	00000000 MC_RAM_MASK
00000008 l       *ABS*	00000000 P2P_EPW
00000003 l       *ABS*	00000000 P2P_LOG_EPW
00000007 l       *ABS*	00000000 P2P_EMASK
00000003 l       *ABS*	00000000 P2P_BPE
00000007 l       *ABS*	00000000 P2P_BMASK
00db6db6 l       *ABS*	00000000 P2P_INIT
e1004000 l       *ABS*	00000000 RTR_MCRAM_BASE
e1005000 l       *ABS*	00000000 RTR_MCRAM_TOP
e1008000 l       *ABS*	00000000 RTR_MCKEY_BASE
e1009000 l       *ABS*	00000000 RTR_MCKEY_TOP
e100c000 l       *ABS*	00000000 RTR_MCMASK_BASE
e100d000 l       *ABS*	00000000 RTR_MCMASK_TOP
e1010000 l       *ABS*	00000000 RTR_P2P_BASE
e1018000 l       *ABS*	00000000 RTR_P2P_TOP
00000020 l       *ABS*	00000000 MC_CAM_WIDTH
f2000000 l       *ABS*	00000000 SYSCTL_BASE_UNBUF
e2000000 l       *ABS*	00000000 SYSCTL_BASE_BUF
e2000000 l       *ABS*	00000000 SYSCTL_BASE
5ec00000 l       *ABS*	00000000 SC_CODE
59111012 l       *ABS*	00000000 CHIP_ID_CODE
00000000 l       *ABS*	00000000 SC_CHIP_ID
00000004 l       *ABS*	00000000 SC_CPU_DIS
00000008 l       *ABS*	00000000 SC_SET_IRQ
0000000c l       *ABS*	00000000 SC_CLR_IRQ
00000010 l       *ABS*	00000000 SC_SET_OK
00000010 l       *ABS*	00000000 SC_CPU_OK
00000014 l       *ABS*	00000000 SC_CLR_OK
00000018 l       *ABS*	00000000 SC_SOFT_RST_L
0000001c l       *ABS*	00000000 SC_HARD_RST_L
00000020 l       *ABS*	00000000 SC_SUBS_RST_L
00000024 l       *ABS*	00000000 SC_SOFT_RST_P
00000028 l       *ABS*	00000000 SC_HARD_RST_P
0000002c l       *ABS*	00000000 SC_SUBS_RST_P
00000030 l       *ABS*	00000000 SC_RST_CODE
00000034 l       *ABS*	00000000 SC_MON_ID
00000038 l       *ABS*	00000000 SC_MISC_CTRL
0000003c l       *ABS*	00000000 GPIO_RES
00000040 l       *ABS*	00000000 GPIO_PORT
00000044 l       *ABS*	00000000 GPIO_DIR
00000048 l       *ABS*	00000000 GPIO_SET
0000004c l       *ABS*	00000000 GPIO_CLR
00000048 l       *ABS*	00000000 GPIO_READ
00000050 l       *ABS*	00000000 SC_PLL1
00000054 l       *ABS*	00000000 SC_PLL2
00000058 l       *ABS*	00000000 SC_FLAG
00000058 l       *ABS*	00000000 SC_SETFLAG
0000005c l       *ABS*	00000000 SC_CLRFLAG
00000060 l       *ABS*	00000000 SC_CLKMUX
00000064 l       *ABS*	00000000 SC_SLEEP
00000068 l       *ABS*	00000000 SC_TS0
0000006c l       *ABS*	00000000 SC_TS1
00000070 l       *ABS*	00000000 SC_TS2
00000080 l       *ABS*	00000000 SC_ARB0
00000100 l       *ABS*	00000000 SC_TAS0
00000180 l       *ABS*	00000000 SC_TAC0
00000200 l       *ABS*	00000000 SC_LINK_DIS
00000000 l       *ABS*	00000000 RST_POR
00000001 l       *ABS*	00000000 RST_WDT
00000002 l       *ABS*	00000000 RST_USER
00000003 l       *ABS*	00000000 RST_SW
00000004 l       *ABS*	00000000 RST_WDI
f3000000 l       *ABS*	00000000 WDOG_BASE_UNBUF
e3000000 l       *ABS*	00000000 WDOG_BASE_BUF
e3000000 l       *ABS*	00000000 WDOG_BASE
00000000 l       *ABS*	00000000 WD_LOAD
00000004 l       *ABS*	00000000 WD_COUNT
00000008 l       *ABS*	00000000 WD_CTRL
0000000c l       *ABS*	00000000 WD_INTCLR
00000010 l       *ABS*	00000000 WD_RAWINT
00000014 l       *ABS*	00000000 WD_MSKINT
00000c00 l       *ABS*	00000000 WD_LOCK
1acce551 l       *ABS*	00000000 WD_CODE
00000001 l       *ABS*	00000000 WD_INT_B
00000002 l       *ABS*	00000000 WD_RST_B
f4000000 l       *ABS*	00000000 ETH_BASE_UNBUF
e4000000 l       *ABS*	00000000 ETH_BASE_BUF
e4000000 l       *ABS*	00000000 ETH_BASE
e4000000 l       *ABS*	00000000 ETH_TX_BASE
00000600 l       *ABS*	00000000 ETH_TX_SIZE
e4000600 l       *ABS*	00000000 ETH_TX_TOP
e4004000 l       *ABS*	00000000 ETH_RX_BASE
00000c00 l       *ABS*	00000000 ETH_RX_SIZE
e4004c00 l       *ABS*	00000000 ETH_RX_TOP
e4008000 l       *ABS*	00000000 ETH_RX_DESC_RAM
e400c000 l       *ABS*	00000000 ETH_REGS
00000000 l       *ABS*	00000000 ETH_CONTROL
00000004 l       *ABS*	00000000 ETH_STATUS
00000008 l       *ABS*	00000000 ETH_TX_LEN
0000000c l       *ABS*	00000000 ETH_TX_CMD
00000010 l       *ABS*	00000000 ETH_RX_CMD
00000014 l       *ABS*	00000000 ETH_MAC_LO
00000018 l       *ABS*	00000000 ETH_MAC_HI
0000001c l       *ABS*	00000000 ETH_PHY_CTRL
00000020 l       *ABS*	00000000 ETH_INT_CLR
00000024 l       *ABS*	00000000 ETH_RX_BUF_RP
0000002c l       *ABS*	00000000 ETH_RX_DESC_RP
00000001 l       *ABS*	00000000 ETH_TX_CLR
00000010 l       *ABS*	00000000 ETH_RX_CLR
00000001 l       *ABS*	00000000 PHY_CTRL_NRST
00000002 l       *ABS*	00000000 PHY_CTRL_DIN
00000004 l       *ABS*	00000000 PHY_CTRL_DOUT
00000008 l       *ABS*	00000000 PHY_CTRL_OE
00000010 l       *ABS*	00000000 PHY_CTRL_CLK
00000000 l       *ABS*	00000000 PKT_MC
00400000 l       *ABS*	00000000 PKT_P2P
00800000 l       *ABS*	00000000 PKT_NN
00a00000 l       *ABS*	00000000 PKT_NND
00c00000 l       *ABS*	00000000 PKT_FR
00020000 l       *ABS*	00000000 PKT_PL
00020000 l       *ABS*	00000000 PKT_MC_PL
00420000 l       *ABS*	00000000 PKT_P2P_PL
00820000 l       *ABS*	00000000 PKT_NN_PL
00c20000 l       *ABS*	00000000 PKT_FR_PL
0000000a l       *ABS*	00000000 CLK_XTAL_MHZ
0007011a l       *ABS*	00000000 PLL_260
0007011e l       *ABS*	00000000 PLL_300
00070121 l       *ABS*	00000000 PLL_330
00070128 l       *ABS*	00000000 PLL_400
00000050 l       *ABS*	00000000 PLL_LOCK_TIME
809488a5 l       *ABS*	00000000 PLL_CLK_SEL
00000020 l       *ABS*	00000000 SERIAL_NCS
00000010 l       *ABS*	00000000 SERIAL_CLK
00000008 l       *ABS*	00000000 SERIAL_SI
00000004 l       *ABS*	00000000 SERIAL_SO
00000038 l       *ABS*	00000000 SERIAL_OE
80000000 l       *ABS*	00000000 SDRAM_TQ
40000000 l       *ABS*	00000000 SDRAM_DPD
20000000 l       *ABS*	00000000 SDRAM_HERE
00000001 l       *ABS*	00000000 LED_0
00000010 l       *ABS*	00000000 MODE_USER
00000011 l       *ABS*	00000000 MODE_FIQ
00000012 l       *ABS*	00000000 MODE_IRQ
00000013 l       *ABS*	00000000 MODE_SVC
00000017 l       *ABS*	00000000 MODE_ABT
0000001b l       *ABS*	00000000 MODE_UND
0000001f l       *ABS*	00000000 MODE_SYS
00000020 l       *ABS*	00000000 THUMB_BIT
00000080 l       *ABS*	00000000 IMASK_IRQ
00000040 l       *ABS*	00000000 IMASK_FIQ
000000c0 l       *ABS*	00000000 IMASK_ALL
00000001 l       *ABS*	00000000 SARK_EVENT
00000180 l       *ABS*	00000000 SVC_STACK
00000100 l       *ABS*	00000000 IRQ_STACK
00000100 l       *ABS*	00000000 FIQ_STACK
00000004 l       *ABS*	00000000 NUM_SDP_MSGS
0000000f l       *ABS*	00000000 SARK_SLOT
00000010 l       *ABS*	00000000 INIT_EVENTS
deaddead l       *ABS*	00000000 DEAD_WORD
00000001 l       *ABS*	00000000 APLX_ACOPY
00000002 l       *ABS*	00000000 APLX_RCOPY
00000003 l       *ABS*	00000000 APLX_FILL
00000004 l       *ABS*	00000000 APLX_EXEC
000000ff l       *ABS*	00000000 APLX_END
00000010 l       *ABS*	00000000 APLX_ENTRY_SIZE
00000040 l       *ABS*	00000000 APLX_BUF_SIZE
00007fc0 l       *ABS*	00000000 APLX_BUFFER
000000ff l       *ABS*	00000000 TAG_NONE
00000000 l       *ABS*	00000000 TAG_HOST
00000001 l       *ABS*	00000000 RTR_ALLOC_FIRST
00000400 l       *ABS*	00000000 RTR_ALLOC_LAST
000003ff l       *ABS*	00000000 RTR_ALLOC_MAX
00000001 l       *ABS*	00000000 ALLOC_LOCK
00000002 l       *ABS*	00000000 ALLOC_ID
00000005 l       *ABS*	00000000 A_LOCK_SEMA
00000001 l       *ABS*	00000000 A_RTE_RESET
00000002 l       *ABS*	00000000 A_RTE_UNDEF
00000003 l       *ABS*	00000000 A_RTE_SVC
00000004 l       *ABS*	00000000 A_RTE_PABT
00000005 l       *ABS*	00000000 A_RTE_DABT
00000006 l       *ABS*	00000000 A_RTE_IRQ
00000007 l       *ABS*	00000000 A_RTE_FIQ
00000008 l       *ABS*	00000000 A_RTE_VIC
00000002 l       *ABS*	00000000 A_STATE_RTE
00000006 l       *ABS*	00000000 EVENT_COUNT
00000000 l       *ABS*	00000000 CMD_VER
00000001 l       *ABS*	00000000 CMD_RUN
00000002 l       *ABS*	00000000 CMD_READ
00000003 l       *ABS*	00000000 CMD_WRITE
00000004 l       *ABS*	00000000 CMD_APLX
00000005 l       *ABS*	00000000 CMD_FILL
00000010 l       *ABS*	00000000 CMD_REMAP
00000011 l       *ABS*	00000000 CMD_LINK_READ
00000012 l       *ABS*	00000000 CMD_LINK_WRITE
00000013 l       *ABS*	00000000 CMD_AR
00000014 l       *ABS*	00000000 CMD_NNP
00000015 l       *ABS*	00000000 CMD_P2PC
00000016 l       *ABS*	00000000 CMD_SIG
00000017 l       *ABS*	00000000 CMD_FFD
00000018 l       *ABS*	00000000 CMD_AS
00000019 l       *ABS*	00000000 CMD_LED
0000001a l       *ABS*	00000000 CMD_IPTAG
0000001b l       *ABS*	00000000 CMD_SROM
0000001c l       *ABS*	00000000 CMD_ALLOC
0000001d l       *ABS*	00000000 CMD_RTR
00000040 l       *ABS*	00000000 CMD_TUBE
00000080 l       *ABS*	00000000 RC_OK
00000081 l       *ABS*	00000000 RC_LEN
00000082 l       *ABS*	00000000 RC_SUM
00000083 l       *ABS*	00000000 RC_CMD
00000084 l       *ABS*	00000000 RC_ARG
00000085 l       *ABS*	00000000 RC_PORT
00000086 l       *ABS*	00000000 RC_TIMEOUT
00000087 l       *ABS*	00000000 RC_ROUTE
00000088 l       *ABS*	00000000 RC_CPU
00000089 l       *ABS*	00000000 RC_DEAD
0000008a l       *ABS*	00000000 RC_BUF
0000008b l       *ABS*	00000000 RC_P2P_NOREPLY
0000008c l       *ABS*	00000000 RC_P2P_REJECT
0000008d l       *ABS*	00000000 RC_P2P_BUSY
0000008e l       *ABS*	00000000 RC_P2P_TIMEOUT
0000008f l       *ABS*	00000000 RC_PKT_TX
00000000 l       *ABS*	00000000 TYPE_BYTE
00000001 l       *ABS*	00000000 TYPE_HALF
00000002 l       *ABS*	00000000 TYPE_WORD
00000005 l       *ABS*	00000000 PORT_SHIFT
000000e0 l       *ABS*	00000000 PORT_MASK
0000001f l       *ABS*	00000000 CPU_MASK
000000ff l       *ABS*	00000000 PORT_ETH
00000100 l       *ABS*	00000000 SDP_BUF_SIZE
00000080 l       *ABS*	00000000 VCPU_SIZE
0000002c l       *ABS*	00000000 VCPU_RT_CODE
0000002d l       *ABS*	00000000 VCPU_CPU_FLAGS
0000002e l       *ABS*	00000000 VCPU_CPU_STATE
0000002f l       *ABS*	00000000 VCPU_APP_ID
0000001c l       *ABS*	00000000 SARK_MSG_INT
0000001d l       *ABS*	00000000 SARK_SIG_INT
00000000 l       *ABS*	00000000 SARK_VIRT_CPU
00000008 l       *ABS*	00000000 SARK_RANDOM
00000030 l       *ABS*	00000000 SARK_CPU_CLK
00000020 l       *ABS*	00000000 SV_SSIZE
00000060 l       *ABS*	00000000 SV_USIZE
00000080 l       *ABS*	00000000 SV_ISIZE
00000020 l       *ABS*	00000000 SV_VSIZE
00000040 l       *ABS*	00000000 SV_RSIZE
00001000 l       *ABS*	00000000 SV_SIZE
e5007fe0 l       *ABS*	00000000 SV_SROM
e5007f80 l       *ABS*	00000000 SV_UBASE
e5007f00 l       *ABS*	00000000 SV_IBASE
e5007f00 l       *ABS*	00000000 SV_SV
00000100 l       *ABS*	00000000 SYS_BOOT
e5007000 l       *ABS*	00000000 SYS_USER_TOP
e5000100 l       *ABS*	00000000 SYS_USER_BASE
e5007ee0 l       *ABS*	00000000 SV_VECTORS
e5007ea0 l       *ABS*	00000000 SV_RANDOM
e5007000 l       *ABS*	00000000 SV_VCPU
e5007900 l       *ABS*	00000000 SV_SPARE
000005a0 l       *ABS*	00000000 SPARE_SIZE
e5007fe0 l       *ABS*	00000000 SROM_FLAG_BASE
e5007f80 l       *ABS*	00000000 STATUS_MAP_BASE
e5007ee0 l       *ABS*	00000000 RST_BLOCK_BASE
00008000 l       *ABS*	00000000 SRF_PRESENT
000000f0 l       *ABS*	00000000 SRF_HW_VER
00000008 l       *ABS*	00000000 SRF_PHY_INIT
00000004 l       *ABS*	00000000 SRF_PHY_RST
00000002 l       *ABS*	00000000 SRF_PHY_WAIT
00000001 l       *ABS*	00000000 SRF_ETH
00000000 l       *ABS*	00000000 SRF_NONE
00000020 l       RO_DATA	00000000 reset_vec
00000004 l       RO_DATA	00000000 undef
00000024 l       RO_DATA	00000000 undef_vec
00000028 l       RO_DATA	00000000 svc_vec
0000002c l       RO_DATA	00000000 pabt_vec
00000030 l       RO_DATA	00000000 dabt_vec
0000003c l       RO_DATA	00000000 fiq_vec
00000078 l       RO_DATA	00000000 reset_entry
000000d8 l       RO_DATA	00000000 undef_error
000000e0 l       RO_DATA	00000000 svc_error
000000e8 l       RO_DATA	00000000 pabt_error
000000f0 l       RO_DATA	00000000 dabt_error
00000034 l       RO_DATA	00000000 aplx_proc
00000038 l       RO_DATA	00000000 irq_vec
000000f8 l       RO_DATA	00000000 irq_error
00000100 l       RO_DATA	00000000 fiq_error
00000040 l       RO_DATA	00000000 svc_stack
00000042 l       RO_DATA	00000000 irq_stack
00000044 l       RO_DATA	00000000 fiq_stack
00000046 l       RO_DATA	00000000 stack_size
00000048 l       RO_DATA	00000000 code_top
0000004c l       RO_DATA	00000000 heap_base
00000050 l       RO_DATA	00000000 stack_top
00000054 l       RO_DATA	00000000 stack_fill
00000058 l       RO_DATA	00000000 num_msgs
00000059 l       RO_DATA	00000000 sark_slot
0000005a l       RO_DATA	00000000 num_events
0000005b l       RO_DATA	00000000 api
0000005c l       RO_DATA	00000000 app_id
0000005d l       RO_DATA	00000000 app_flags
0000005e l       RO_DATA	00000000 __PAD
00000060 l       RO_DATA	00000000 event_vec
000000d0 l       RO_DATA	00000000 reset_error
00000114 l       RO_DATA	00000000 exc_error
00000138 l       RO_DATA	00000000 cc_error
000001dc l       RO_DATA	00000000 lg1
00000218 l       RO_DATA	00000000 ws1
00000278 l       RO_DATA	00000000 wc2
00000260 l       RO_DATA	00000000 wc1
000002fc l       RO_DATA	00000000 aplx_buffer
00000300 l       RO_DATA	00000000 aplx_loader
000002ec l       RO_DATA	00000000 aplx_l0
00000318 l       RO_DATA	00000000 aplx_copy
00000314 l       RO_DATA	00000000 aplx_rcopy
00000326 l       RO_DATA	00000000 aplx_fill
00000336 l       RO_DATA	00000000 aplx_exec
0000032c l       RO_DATA	00000000 aplx_l1
00000000 l    df *ABS*	00000000 sark_base.c
00000000 l    df *ABS*	00000000 sark_event.c
00000000 l    df *ABS*	00000000 sark_timer.c
00000000 l    df *ABS*	00000000 sark_hw.c
00000000 l    df *ABS*	00000000 sark_isr.c
00000000 l    df *ABS*	00000000 sark_alloc.c
00000000 l    df *ABS*	00000000 sark_io.c
00000000 l    df *ABS*	00000000 sark_pkt.c
00000000 l    df *ABS*	00000000 
00000000 l    df *ABS*	00000000 stress_test.c
00000000 l    df *ABS*	00000000 spin1_api.c
00400000 l     O ZI_DATA	00000004 warnings
00400004 l     O ZI_DATA	00000004 fullq
00400008 l     O ZI_DATA	00000004 timer_tick
0040000c l     O ZI_DATA	00000320 task_queue
00000000 l    df *ABS*	00000000 sark_build.c
00000000 l    df *ABS*	00000000 
00000040 l       *ABS*	00000000 RO_FROM
00000010 l       *ABS*	00000000 APLX_ENTRY
00000bc8 l       *ABS*	00000000 RW_FROM
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 _ITM_registerTMCloneTable
00400000 l       *ABS*	00000000 DTCM_BASE
00400000 l       *ABS*	00000000 RW_BASE
00000000 l       *ABS*	00000000 RW_LENGTH
00000040 l       *ABS*	00000000 APLX_SIZE
00000000 l       *UND*	00000000 _ITM_deregisterTMCloneTable
00400000 l       *ABS*	00000000 ZI_BASE
00000000 l       *ABS*	00000000 RO_BASE
00000000 l       *ABS*	00000000 ITCM_BASE
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
0000068c l       *ABS*	00000000 ZI_LENGTH
00400400 g     O ZI_DATA	00000004 old_vector
000001c8 g     F RO_DATA	00000000 sark_lock_get
00000b40 g     F RO_DATA	0000002c sark_pre_main
000003f0 g     F RO_DATA	00000034 sark_shmsg_get
00000800 g       *ABS*	00000000 STACK_SIZE
000002d2 g     F RO_DATA	00000000 sark_bx
00000238 g     F RO_DATA	00000000 sark_msg_cpy
000008d8 g     F RO_DATA	0000003c event_alloc
00000380 g     F RO_DATA	0000001e sark_block_init
000009ac g     F RO_DATA	00000028 sark_fiq_han
000003d0 g     F RO_DATA	00000020 sark_msg_free
0000033c g     F RO_DATA	00000010 c_main
00000720 g     F RO_DATA	00000174 sark_int
0000029c g     F RO_DATA	00000000 sark_int_han
0000070c g     F RO_DATA	00000012 sark_wait
000001b8 g     F RO_DATA	00000000 spin1_mode_restore
000006fc g     F RO_DATA	00000010 sark_cmd_fill
00000914 g     F RO_DATA	00000050 sark_vic_init
0000016c g     F RO_DATA	00000000 cpu_shutdown
000001b8 g     F RO_DATA	00000000 cpu_int_restore
00400404 g     O ZI_DATA	0000002c diagnostics
00410000 g       *ABS*	00000000 STACK_TOP
0040068c g       ZI_DATA	00000000 HEAP_BASE
000009d4 g     F RO_DATA	000000c8 sark_xalloc
00400430 g     O ZI_DATA	00000004 old_enable
000002d4 g     F RO_DATA	00000000 __gnu_thumb1_case_uqi
00400434 g     O ZI_DATA	00000004 user_arg1
00000424 g     F RO_DATA	00000024 sark_shmsg_free
0000012c g       RO_DATA	00000000 rt_error
0000035c g     F RO_DATA	00000010 sark_cpu_state
00000b6c g     F RO_DATA	0000000a sark_post_main
00000000 g       RO_DATA	00000000 cpu_reset
00000108 g       RO_DATA	00000000 vic_error
00000b78 g     O RO_DATA	0000000c build_name
000002d0  w    F RO_DATA	00000000 sark_config
00000894 g     F RO_DATA	0000002c event_pause
00000b84 g     O RO_DATA	00000004 build_date
000001ec g     F RO_DATA	00000000 sark_lock_free
00000a9c g     F RO_DATA	00000018 sark_alloc
00000190 g     F RO_DATA	00000000 cpu_init_mode
00000248 g     F RO_DATA	00000000 sark_word_cpy
0000017c g     F RO_DATA	00000000 cpu_sleep
00400438 g     O ZI_DATA	00000001 leadAp
0040032c g     O ZI_DATA	0000003c sark
00000acc g     F RO_DATA	0000000c spin1_set_timer_tick
00000544 g     F RO_DATA	000000a8 sark_msg_send
000001c0 g     F RO_DATA	00000000 spin1_wfi
000005ec g     F RO_DATA	00000040 sark_cmd_ver
0000034c g     F RO_DATA	00000004 app_init
000001c0 g     F RO_DATA	00000000 cpu_wfi
000008c0 g     F RO_DATA	00000018 event_stop
000001a8 g     F RO_DATA	00000000 cpu_int_disable
00000964 g     F RO_DATA	00000048 sark_vic_set
0040043c g     O ZI_DATA	00000004 thrown
00000ab4 g     F RO_DATA	00000018 sark_heap_init
00400368 g     O ZI_DATA	00000098 event
00000692 g     F RO_DATA	0000006a sark_cmd_write
00000448  w    F RO_DATA	000000fc sark_init
00000350  w    F RO_DATA	0000000c rte_handler
000002e4 g     F RO_DATA	00000000 sark_aplx
00400440 g     O ZI_DATA	00000148 dma_queue
00000214 g     F RO_DATA	00000000 sark_word_set
00400588 g     O ZI_DATA	00000004 old_select
0040058c g     O ZI_DATA	00000004 ticks
000002cc g     F RO_DATA	00000000 null_int_han
00000ad8 g     F RO_DATA	00000068 schedule_sysmode
00000200 g     F RO_DATA	00000000 sark_str_cpy
00400590 g     O ZI_DATA	00000004 user_arg0
0000036c g     F RO_DATA	00000014 sark_app_lead
00400594 g     O ZI_DATA	00000030 callback
000001a8 g     F RO_DATA	00000000 spin1_int_disable
0000062c g     F RO_DATA	00000066 sark_cmd_read
00000b98 g       *ABS*	00000000 RO_LENGTH
000003a0 g     F RO_DATA	00000030 sark_msg_get
004005c4 g     O ZI_DATA	000000c8 tx_packet_queue



Disassembly of section RO_DATA:

00000000 <cpu_reset>:
   0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <reset_vec>

00000004 <undef>:
   4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <undef_vec>
   8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <svc_vec>
   c:	e59ff018 	ldr	pc, [pc, #24]	; 2c <pabt_vec>
  10:	e59ff018 	ldr	pc, [pc, #24]	; 30 <dabt_vec>
  14:	ebfffffa 	bl	4 <undef>
  18:	e51ffff0 	ldr	pc, [pc, #-4080]	; fffff030 <ROM_TOP+0x9ff7030>
  1c:	e59ff018 	ldr	pc, [pc, #24]	; 3c <fiq_vec>

00000020 <reset_vec>:
  20:	00000078 	.word	0x00000078

00000024 <undef_vec>:
  24:	000000d8 	.word	0x000000d8

00000028 <svc_vec>:
  28:	000000e0 	.word	0x000000e0

0000002c <pabt_vec>:
  2c:	000000e8 	.word	0x000000e8

00000030 <dabt_vec>:
  30:	000000f0 	.word	0x000000f0

00000034 <aplx_proc>:
  34:	000002e5 	.word	0x000002e5

00000038 <irq_vec>:
  38:	000000f8 	.word	0x000000f8

0000003c <fiq_vec>:
  3c:	00000100 	.word	0x00000100

00000040 <svc_stack>:
  40:	0060      	.short	0x0060

00000042 <irq_stack>:
  42:	0040      	.short	0x0040

00000044 <fiq_stack>:
  44:	0040      	.short	0x0040

00000046 <stack_size>:
  46:	0800      	.short	0x0800

00000048 <code_top>:
  48:	00000b98 	.word	0x00000b98

0000004c <heap_base>:
  4c:	0040068c 	.word	0x0040068c

00000050 <stack_top>:
  50:	00410000 	.word	0x00410000

00000054 <stack_fill>:
  54:	deaddead 	.word	0xdeaddead

00000058 <num_msgs>:
  58:	04          	.byte	0x04

00000059 <sark_slot>:
  59:	0f          	.byte	0x0f

0000005a <num_events>:
  5a:	10          	.byte	0x10

0000005b <api>:
	...

0000005c <app_id>:
	...

0000005d <app_flags>:
	...

0000005e <__PAD>:
	...

00000060 <event_vec>:
	...

00000078 <reset_entry>:
  78:	e24f1060 	sub	r1, pc, #96	; 0x60
  7c:	e1c103bc 	strh	r0, [r1, #60]	; 0x3c
  80:	e28f0048 	add	r0, pc, #72	; 0x48
  84:	e5810000 	str	r0, [r1]
  88:	e59f00f4 	ldr	r0, [pc, #244]	; 184 <DMA_CRCT+0x4>
  8c:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
  90:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
  94:	e3a0d902 	mov	sp, #32768	; 0x8000
  98:	fa00008c 	blx	2d0 <sark_config>
  9c:	e51fd054 	ldr	sp, [pc, #-84]	; 50 <stack_top>
  a0:	e15f26b2 	ldrh	r2, [pc, #-98]	; 46 <stack_size>
  a4:	e51f1058 	ldr	r1, [pc, #-88]	; 54 <stack_fill>
  a8:	e04d0002 	sub	r0, sp, r2
  ac:	eb000058 	bl	214 <sark_word_set>
  b0:	e1a0000d 	mov	r0, sp
  b4:	fa0000e3 	blx	448 <sark_init>
  b8:	e121f000 	msr	CPSR_c, r0
  bc:	fa000192 	blx	70c <sark_wait>
  c0:	fa00029e 	blx	b40 <sark_pre_main>
  c4:	fa00009c 	blx	33c <c_main>
  c8:	fa0002a7 	blx	b6c <sark_post_main>
  cc:	eb00002a 	bl	17c <cpu_sleep>

000000d0 <reset_error>:
  d0:	e3a00001 	mov	r0, #1
  d4:	ea000014 	b	12c <rt_error>

000000d8 <undef_error>:
  d8:	e3a0b002 	mov	fp, #2
  dc:	ea00000c 	b	114 <exc_error>

000000e0 <svc_error>:
  e0:	e3a0b003 	mov	fp, #3
  e4:	ea00000a 	b	114 <exc_error>

000000e8 <pabt_error>:
  e8:	e3a0b004 	mov	fp, #4
  ec:	ea000008 	b	114 <exc_error>

000000f0 <dabt_error>:
  f0:	e3a0b005 	mov	fp, #5
  f4:	ea000006 	b	114 <exc_error>

000000f8 <irq_error>:
  f8:	e3a0b006 	mov	fp, #6
  fc:	ea000004 	b	114 <exc_error>

00000100 <fiq_error>:
 100:	e3a0b007 	mov	fp, #7
 104:	ea000002 	b	114 <exc_error>

00000108 <vic_error>:
 108:	e3a0b008 	mov	fp, #8
 10c:	e3a0042f 	mov	r0, #788529152	; 0x2f000000
 110:	e5900030 	ldr	r0, [r0, #48]	; 0x30

00000114 <exc_error>:
 114:	e1a0a00e 	mov	sl, lr
 118:	e14f8000 	mrs	r8, SPSR
 11c:	e38890c0 	orr	r9, r8, #192	; 0xc0
 120:	e3c99020 	bic	r9, r9, #32
 124:	e12ff009 	msr	CPSR_fsxc, r9
 128:	ea000002 	b	138 <cc_error>

0000012c <rt_error>:
 12c:	e1a0b000 	mov	fp, r0
 130:	e10f8000 	mrs	r8, CPSR
 134:	e1a0a00e 	mov	sl, lr

00000138 <cc_error>:
 138:	e59fc048 	ldr	ip, [pc, #72]	; 188 <DMA_CRCT+0x8>
 13c:	e59cc000 	ldr	ip, [ip]
 140:	e3a09080 	mov	r9, #128	; 0x80
 144:	e59fe040 	ldr	lr, [pc, #64]	; 18c <DMA_CRCT+0xc>
 148:	e02ee99c 	mla	lr, ip, r9, lr
 14c:	e1a0900d 	mov	r9, sp
 150:	e88e07ff 	stm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl}
 154:	e5ceb02c 	strb	fp, [lr, #44]	; 0x2c
 158:	e3a08002 	mov	r8, #2
 15c:	e5ce802e 	strb	r8, [lr, #46]	; 0x2e
 160:	e1a0000b 	mov	r0, fp
 164:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
 168:	fa000078 	blx	350 <rte_handler>

0000016c <cpu_shutdown>:
 16c:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
 170:	e3a0042f 	mov	r0, #788529152	; 0x2f000000
 174:	e3e01000 	mvn	r1, #0
 178:	e5801014 	str	r1, [r0, #20]

0000017c <cpu_sleep>:
 17c:	ee070f90 	mcr	15, 0, r0, cr7, cr0, {4}
 180:	eafffffd 	b	17c <cpu_sleep>
 184:	00001f7e 	.word	0x00001f7e
 188:	0040032c 	.word	0x0040032c
 18c:	e5007000 	.word	0xe5007000

00000190 <cpu_init_mode>:
 190:	e10f3000 	mrs	r3, CPSR
 194:	e121f001 	msr	CPSR_c, r1
 198:	e1a0d000 	mov	sp, r0
 19c:	e12ff003 	msr	CPSR_fsxc, r3
 1a0:	e0400102 	sub	r0, r0, r2, lsl #2
 1a4:	e12fff1e 	bx	lr

000001a8 <cpu_int_disable>:
 1a8:	e10f0000 	mrs	r0, CPSR
 1ac:	e38010c0 	orr	r1, r0, #192	; 0xc0
 1b0:	e121f001 	msr	CPSR_c, r1
 1b4:	e12fff1e 	bx	lr

000001b8 <cpu_int_restore>:
 1b8:	e12ff000 	msr	CPSR_fsxc, r0
 1bc:	e12fff1e 	bx	lr

000001c0 <cpu_wfi>:
 1c0:	ee070f90 	mcr	15, 0, r0, cr7, cr0, {4}
 1c4:	e12fff1e 	bx	lr

000001c8 <sark_lock_get>:
 1c8:	e3a0c4e2 	mov	ip, #-503316480	; 0xe2000000
 1cc:	e08cc100 	add	ip, ip, r0, lsl #2
 1d0:	e10f0000 	mrs	r0, CPSR
 1d4:	e38010c0 	orr	r1, r0, #192	; 0xc0
 1d8:	e121f001 	msr	CPSR_c, r1

000001dc <lg1>:
 1dc:	e59c1100 	ldr	r1, [ip, #256]	; 0x100
 1e0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
 1e4:	1afffffc 	bne	1dc <lg1>
 1e8:	e12fff1e 	bx	lr

000001ec <sark_lock_free>:
 1ec:	e3a0c4e2 	mov	ip, #-503316480	; 0xe2000000
 1f0:	e08c1101 	add	r1, ip, r1, lsl #2
 1f4:	e5911180 	ldr	r1, [r1, #384]	; 0x180
 1f8:	e121f000 	msr	CPSR_c, r0
 1fc:	e12fff1e 	bx	lr

00000200 <sark_str_cpy>:
 200:	e4d12001 	ldrb	r2, [r1], #1
 204:	e3520000 	cmp	r2, #0
 208:	e4c02001 	strb	r2, [r0], #1
 20c:	1afffffb 	bne	200 <sark_str_cpy>
 210:	e12fff1e 	bx	lr

00000214 <sark_word_set>:
 214:	e1a03001 	mov	r3, r1

00000218 <ws1>:
 218:	e2522010 	subs	r2, r2, #16
 21c:	28a0000a 	stmiacs	r0!, {r1, r3}
 220:	28a0000a 	stmiacs	r0!, {r1, r3}
 224:	2afffffb 	bcs	218 <ws1>
 228:	e1b02e82 	lsls	r2, r2, #29
 22c:	28a0000a 	stmiacs	r0!, {r1, r3}
 230:	48a00002 	stmiami	r0!, {r1}
 234:	e12fff1e 	bx	lr

00000238 <sark_msg_cpy>:
 238:	e2800004 	add	r0, r0, #4
 23c:	e2811004 	add	r1, r1, #4
 240:	e1d120b0 	ldrh	r2, [r1]
 244:	e2822004 	add	r2, r2, #4

00000248 <sark_word_cpy>:
 248:	e3120003 	tst	r2, #3
 24c:	13c22003 	bicne	r2, r2, #3
 250:	12822004 	addne	r2, r2, #4
 254:	e92d4010 	push	{r4, lr}
 258:	e2522020 	subs	r2, r2, #32
 25c:	3a000005 	bcc	278 <wc2>

00000260 <wc1>:
 260:	e8b15018 	ldm	r1!, {r3, r4, ip, lr}
 264:	e8a05018 	stmia	r0!, {r3, r4, ip, lr}
 268:	e8b15018 	ldm	r1!, {r3, r4, ip, lr}
 26c:	e8a05018 	stmia	r0!, {r3, r4, ip, lr}
 270:	e2522020 	subs	r2, r2, #32
 274:	2afffff9 	bcs	260 <wc1>

00000278 <wc2>:
 278:	e1b0ce02 	lsls	ip, r2, #28
 27c:	28b15018 	ldmcs	r1!, {r3, r4, ip, lr}
 280:	28a05018 	stmiacs	r0!, {r3, r4, ip, lr}
 284:	48b10018 	ldmmi	r1!, {r3, r4}
 288:	48a00018 	stmiami	r0!, {r3, r4}
 28c:	e1b0cf02 	lsls	ip, r2, #30
 290:	24913004 	ldrcs	r3, [r1], #4
 294:	24803004 	strcs	r3, [r0], #4
 298:	e8bd8010 	pop	{r4, pc}

0000029c <sark_int_han>:
 29c:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
 2a0:	e24e0004 	sub	r0, lr, #4
 2a4:	e14fc000 	mrs	ip, SPSR
 2a8:	e321f01f 	msr	CPSR_c, #31
 2ac:	e92d5000 	push	{ip, lr}
 2b0:	fa00011a 	blx	720 <sark_int>
 2b4:	e8bd5000 	pop	{ip, lr}
 2b8:	e321f092 	msr	CPSR_c, #146	; 0x92
 2bc:	e16ff00c 	msr	SPSR_fsxc, ip
 2c0:	e3a0042f 	mov	r0, #788529152	; 0x2f000000
 2c4:	e5800030 	str	r0, [r0, #48]	; 0x30
 2c8:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

000002cc <null_int_han>:
 2cc:	e25ef004 	subs	pc, lr, #4

000002d0 <sark_config>:
 2d0:	4770      	bx	lr

000002d2 <sark_bx>:
 2d2:	4700      	bx	r0

000002d4 <__gnu_thumb1_case_uqi>:
 2d4:	468c      	mov	ip, r1
 2d6:	4671      	mov	r1, lr
 2d8:	3901      	subs	r1, #1
 2da:	5c09      	ldrb	r1, [r1, r0]
 2dc:	0049      	lsls	r1, r1, #1
 2de:	448e      	add	lr, r1
 2e0:	4661      	mov	r1, ip
 2e2:	4770      	bx	lr

000002e4 <sark_aplx>:
 2e4:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 2e6:	4905      	ldr	r1, [pc, #20]	; (2fc <aplx_buffer>)
 2e8:	a605      	add	r6, pc, #20	; (adr r6, 300 <aplx_loader>)
 2ea:	2740      	movs	r7, #64	; 0x40

000002ec <aplx_l0>:
 2ec:	ce3c      	ldmia	r6!, {r2, r3, r4, r5}
 2ee:	c13c      	stmia	r1!, {r2, r3, r4, r5}
 2f0:	3f10      	subs	r7, #16
 2f2:	d1fb      	bne.n	2ec <aplx_l0>
 2f4:	1c04      	adds	r4, r0, #0
 2f6:	393f      	subs	r1, #63	; 0x3f
 2f8:	4708      	bx	r1
	...

000002fc <aplx_buffer>:
 2fc:	00007fc0 	.word	0x00007fc0

00000300 <aplx_loader>:
 300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 302:	2801      	cmp	r0, #1
 304:	d008      	beq.n	318 <aplx_copy>
 306:	2802      	cmp	r0, #2
 308:	d004      	beq.n	314 <aplx_rcopy>
 30a:	2803      	cmp	r0, #3
 30c:	d00b      	beq.n	326 <aplx_fill>
 30e:	2804      	cmp	r0, #4
 310:	d011      	beq.n	336 <aplx_exec>
 312:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

00000314 <aplx_rcopy>:
 314:	1912      	adds	r2, r2, r4
 316:	3a10      	subs	r2, #16

00000318 <aplx_copy>:
 318:	cae1      	ldmia	r2!, {r0, r5, r6, r7}
 31a:	c1e1      	stmia	r1!, {r0, r5, r6, r7}
 31c:	cae1      	ldmia	r2!, {r0, r5, r6, r7}
 31e:	c1e1      	stmia	r1!, {r0, r5, r6, r7}
 320:	3b20      	subs	r3, #32
 322:	d8f9      	bhi.n	318 <aplx_copy>
 324:	e7ec      	b.n	300 <aplx_loader>

00000326 <aplx_fill>:
 326:	1c1d      	adds	r5, r3, #0
 328:	1c1e      	adds	r6, r3, #0
 32a:	1c1f      	adds	r7, r3, #0

0000032c <aplx_l1>:
 32c:	c1e8      	stmia	r1!, {r3, r5, r6, r7}
 32e:	c1e8      	stmia	r1!, {r3, r5, r6, r7}
 330:	3a20      	subs	r2, #32
 332:	d8fb      	bhi.n	32c <aplx_l1>
 334:	e7e4      	b.n	300 <aplx_loader>

00000336 <aplx_exec>:
 336:	9800      	ldr	r0, [sp, #0]
 338:	4788      	blx	r1
 33a:	e7e1      	b.n	300 <aplx_loader>

0000033c <c_main>:
 33c:	b508      	push	{r3, lr}
 33e:	4802      	ldr	r0, [pc, #8]	; (348 <RTR_DGC15+0xc>)
 340:	f000 fbc4 	bl	acc <spin1_set_timer_tick>
 344:	e7fe      	b.n	344 <c_main+0x8>
 346:	46c0      	nop			; (mov r8, r8)
 348:	00002710 	.word	0x00002710

0000034c <app_init>:
 34c:	b500      	push	{lr}
 34e:	e7fe      	b.n	34e <app_init+0x2>

00000350 <rte_handler>:
 350:	4b01      	ldr	r3, [pc, #4]	; (358 <rte_handler+0x8>)
 352:	2208      	movs	r2, #8
 354:	701a      	strb	r2, [r3, #0]
 356:	4770      	bx	lr
 358:	e5007f2b 	.word	0xe5007f2b

0000035c <sark_cpu_state>:
 35c:	4b02      	ldr	r3, [pc, #8]	; (368 <sark_cpu_state+0xc>)
 35e:	69db      	ldr	r3, [r3, #28]
 360:	332e      	adds	r3, #46	; 0x2e
 362:	7018      	strb	r0, [r3, #0]
 364:	4770      	bx	lr
 366:	46c0      	nop			; (mov r8, r8)
 368:	0040032c 	.word	0x0040032c

0000036c <sark_app_lead>:
 36c:	235c      	movs	r3, #92	; 0x5c
 36e:	4a03      	ldr	r2, [pc, #12]	; (37c <sark_app_lead+0x10>)
 370:	781b      	ldrb	r3, [r3, #0]
 372:	6812      	ldr	r2, [r2, #0]
 374:	00db      	lsls	r3, r3, #3
 376:	18d3      	adds	r3, r2, r3
 378:	78d8      	ldrb	r0, [r3, #3]
 37a:	4770      	bx	lr
 37c:	e5007fe4 	.word	0xe5007fe4

00000380 <sark_block_init>:
 380:	b530      	push	{r4, r5, lr}
 382:	1c0b      	adds	r3, r1, #0
 384:	1c04      	adds	r4, r0, #0
 386:	e002      	b.n	38e <sark_block_init+0xe>
 388:	18a5      	adds	r5, r4, r2
 38a:	6025      	str	r5, [r4, #0]
 38c:	1c2c      	adds	r4, r5, #0
 38e:	3b01      	subs	r3, #1
 390:	2b00      	cmp	r3, #0
 392:	d1f9      	bne.n	388 <sark_block_init+0x8>
 394:	3901      	subs	r1, #1
 396:	434a      	muls	r2, r1
 398:	1880      	adds	r0, r0, r2
 39a:	6003      	str	r3, [r0, #0]
 39c:	bd30      	pop	{r4, r5, pc}
	...

000003a0 <sark_msg_get>:
 3a0:	b510      	push	{r4, lr}
 3a2:	f7ff ef02 	blx	1a8 <cpu_int_disable>
 3a6:	4b09      	ldr	r3, [pc, #36]	; (3cc <sark_msg_get+0x2c>)
 3a8:	6a1c      	ldr	r4, [r3, #32]
 3aa:	2c00      	cmp	r4, #0
 3ac:	d00a      	beq.n	3c4 <sark_msg_get+0x24>
 3ae:	6822      	ldr	r2, [r4, #0]
 3b0:	621a      	str	r2, [r3, #32]
 3b2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 3b4:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 3b6:	3201      	adds	r2, #1
 3b8:	0412      	lsls	r2, r2, #16
 3ba:	0c12      	lsrs	r2, r2, #16
 3bc:	849a      	strh	r2, [r3, #36]	; 0x24
 3be:	4291      	cmp	r1, r2
 3c0:	d200      	bcs.n	3c4 <sark_msg_get+0x24>
 3c2:	84da      	strh	r2, [r3, #38]	; 0x26
 3c4:	f7ff eef8 	blx	1b8 <cpu_int_restore>
 3c8:	1c20      	adds	r0, r4, #0
 3ca:	bd10      	pop	{r4, pc}
 3cc:	0040032c 	.word	0x0040032c

000003d0 <sark_msg_free>:
 3d0:	b510      	push	{r4, lr}
 3d2:	1c04      	adds	r4, r0, #0
 3d4:	f7ff eee8 	blx	1a8 <cpu_int_disable>
 3d8:	4b04      	ldr	r3, [pc, #16]	; (3ec <sark_msg_free+0x1c>)
 3da:	6a1a      	ldr	r2, [r3, #32]
 3dc:	6022      	str	r2, [r4, #0]
 3de:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 3e0:	621c      	str	r4, [r3, #32]
 3e2:	3a01      	subs	r2, #1
 3e4:	849a      	strh	r2, [r3, #36]	; 0x24
 3e6:	f7ff eee8 	blx	1b8 <cpu_int_restore>
 3ea:	bd10      	pop	{r4, pc}
 3ec:	0040032c 	.word	0x0040032c

000003f0 <sark_shmsg_get>:
 3f0:	b510      	push	{r4, lr}
 3f2:	2000      	movs	r0, #0
 3f4:	f7ff eee8 	blx	1c8 <sark_lock_get>
 3f8:	4b09      	ldr	r3, [pc, #36]	; (420 <MC_TABLE_SIZE+0x20>)
 3fa:	681c      	ldr	r4, [r3, #0]
 3fc:	2c00      	cmp	r4, #0
 3fe:	d00a      	beq.n	416 <MC_TABLE_SIZE+0x16>
 400:	6822      	ldr	r2, [r4, #0]
 402:	601a      	str	r2, [r3, #0]
 404:	889a      	ldrh	r2, [r3, #4]
 406:	88d9      	ldrh	r1, [r3, #6]
 408:	3201      	adds	r2, #1
 40a:	0412      	lsls	r2, r2, #16
 40c:	0c12      	lsrs	r2, r2, #16
 40e:	809a      	strh	r2, [r3, #4]
 410:	4291      	cmp	r1, r2
 412:	d200      	bcs.n	416 <MC_TABLE_SIZE+0x16>
 414:	80da      	strh	r2, [r3, #6]
 416:	2100      	movs	r1, #0
 418:	f7ff eee8 	blx	1ec <sark_lock_free>
 41c:	1c20      	adds	r0, r4, #0
 41e:	bd10      	pop	{r4, pc}
 420:	e5007f68 	.word	0xe5007f68

00000424 <sark_shmsg_free>:
 424:	b510      	push	{r4, lr}
 426:	1c04      	adds	r4, r0, #0
 428:	2000      	movs	r0, #0
 42a:	f7ff eece 	blx	1c8 <sark_lock_get>
 42e:	4b05      	ldr	r3, [pc, #20]	; (444 <sark_shmsg_free+0x20>)
 430:	2100      	movs	r1, #0
 432:	681a      	ldr	r2, [r3, #0]
 434:	6022      	str	r2, [r4, #0]
 436:	889a      	ldrh	r2, [r3, #4]
 438:	601c      	str	r4, [r3, #0]
 43a:	3a01      	subs	r2, #1
 43c:	809a      	strh	r2, [r3, #4]
 43e:	f7ff eed6 	blx	1ec <sark_lock_free>
 442:	bd10      	pop	{r4, pc}
 444:	e5007f68 	.word	0xe5007f68

00000448 <sark_init>:
 448:	b570      	push	{r4, r5, r6, lr}
 44a:	2520      	movs	r5, #32
 44c:	1c04      	adds	r4, r0, #0
 44e:	8c28      	ldrh	r0, [r5, #32]
 450:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 452:	0080      	lsls	r0, r0, #2
 454:	1a20      	subs	r0, r4, r0
 456:	21d2      	movs	r1, #210	; 0xd2
 458:	f7ff ee9a 	blx	190 <cpu_init_mode>
 45c:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 45e:	21d1      	movs	r1, #209	; 0xd1
 460:	f7ff ee96 	blx	190 <cpu_init_mode>
 464:	2200      	movs	r2, #0
 466:	21df      	movs	r1, #223	; 0xdf
 468:	f7ff ee92 	blx	190 <cpu_init_mode>
 46c:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 46e:	2658      	movs	r6, #88	; 0x58
 470:	0889      	lsrs	r1, r1, #2
 472:	0089      	lsls	r1, r1, #2
 474:	1a61      	subs	r1, r4, r1
 476:	4c2a      	ldr	r4, [pc, #168]	; (520 <sark_init+0xd8>)
 478:	6121      	str	r1, [r4, #16]
 47a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 47c:	6160      	str	r0, [r4, #20]
 47e:	f000 fb19 	bl	ab4 <sark_heap_init>
 482:	4b28      	ldr	r3, [pc, #160]	; (524 <sark_init+0xdc>)
 484:	4a28      	ldr	r2, [pc, #160]	; (528 <sark_init+0xe0>)
 486:	681b      	ldr	r3, [r3, #0]
 488:	4d28      	ldr	r5, [pc, #160]	; (52c <sark_init+0xe4>)
 48a:	0e1b      	lsrs	r3, r3, #24
 48c:	6063      	str	r3, [r4, #4]
 48e:	189b      	adds	r3, r3, r2
 490:	2192      	movs	r1, #146	; 0x92
 492:	0049      	lsls	r1, r1, #1
 494:	61a0      	str	r0, [r4, #24]
 496:	791b      	ldrb	r3, [r3, #4]
 498:	6023      	str	r3, [r4, #0]
 49a:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 49c:	8623      	strh	r3, [r4, #48]	; 0x30
 49e:	4b24      	ldr	r3, [pc, #144]	; (530 <sark_init+0xe8>)
 4a0:	60a3      	str	r3, [r4, #8]
 4a2:	7830      	ldrb	r0, [r6, #0]
 4a4:	f000 fafa 	bl	a9c <sark_alloc>
 4a8:	2292      	movs	r2, #146	; 0x92
 4aa:	0052      	lsls	r2, r2, #1
 4ac:	6220      	str	r0, [r4, #32]
 4ae:	7831      	ldrb	r1, [r6, #0]
 4b0:	f7ff ff66 	bl	380 <sark_block_init>
 4b4:	6823      	ldr	r3, [r4, #0]
 4b6:	2b11      	cmp	r3, #17
 4b8:	d81d      	bhi.n	4f6 <sark_init+0xae>
 4ba:	4a1e      	ldr	r2, [pc, #120]	; (534 <sark_init+0xec>)
 4bc:	01d8      	lsls	r0, r3, #7
 4be:	1880      	adds	r0, r0, r2
 4c0:	6daa      	ldr	r2, [r5, #88]	; 0x58
 4c2:	61e0      	str	r0, [r4, #28]
 4c4:	4353      	muls	r3, r2
 4c6:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 4c8:	009b      	lsls	r3, r3, #2
 4ca:	18d3      	adds	r3, r2, r3
 4cc:	2100      	movs	r1, #0
 4ce:	2270      	movs	r2, #112	; 0x70
 4d0:	6363      	str	r3, [r4, #52]	; 0x34
 4d2:	f7ff eea0 	blx	214 <sark_word_set>
 4d6:	69e0      	ldr	r0, [r4, #28]
 4d8:	2205      	movs	r2, #5
 4da:	1c03      	adds	r3, r0, #0
 4dc:	332e      	adds	r3, #46	; 0x2e
 4de:	701a      	strb	r2, [r3, #0]
 4e0:	235c      	movs	r3, #92	; 0x5c
 4e2:	781a      	ldrb	r2, [r3, #0]
 4e4:	1c03      	adds	r3, r0, #0
 4e6:	332f      	adds	r3, #47	; 0x2f
 4e8:	701a      	strb	r2, [r3, #0]
 4ea:	69ed      	ldr	r5, [r5, #28]
 4ec:	6445      	str	r5, [r0, #68]	; 0x44
 4ee:	4912      	ldr	r1, [pc, #72]	; (538 <sark_init+0xf0>)
 4f0:	3048      	adds	r0, #72	; 0x48
 4f2:	f7ff ee86 	blx	200 <sark_str_cpy>
 4f6:	f000 fa0d 	bl	914 <sark_vic_init>
 4fa:	2359      	movs	r3, #89	; 0x59
 4fc:	7818      	ldrb	r0, [r3, #0]
 4fe:	2112      	movs	r1, #18
 500:	2201      	movs	r2, #1
 502:	4b0e      	ldr	r3, [pc, #56]	; (53c <sark_init+0xf4>)
 504:	f000 fa2e 	bl	964 <sark_vic_set>
 508:	2106      	movs	r1, #6
 50a:	2201      	movs	r2, #1
 50c:	2010      	movs	r0, #16
 50e:	4b0c      	ldr	r3, [pc, #48]	; (540 <sark_init+0xf8>)
 510:	f000 fa28 	bl	964 <sark_vic_set>
 514:	235a      	movs	r3, #90	; 0x5a
 516:	7818      	ldrb	r0, [r3, #0]
 518:	f000 f9de 	bl	8d8 <event_alloc>
 51c:	201f      	movs	r0, #31
 51e:	bd70      	pop	{r4, r5, r6, pc}
 520:	0040032c 	.word	0x0040032c
 524:	40000014 	.word	0x40000014
 528:	e5007f90 	.word	0xe5007f90
 52c:	e5007f00 	.word	0xe5007f00
 530:	deaddead 	.word	0xdeaddead
 534:	e5007000 	.word	0xe5007000
 538:	00000b78 	.word	0x00000b78
 53c:	0000029c 	.word	0x0000029c
 540:	000009ac 	.word	0x000009ac

00000544 <sark_msg_send>:
 544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 546:	1c05      	adds	r5, r0, #0
 548:	1c0f      	adds	r7, r1, #0
 54a:	f7ff ff51 	bl	3f0 <sark_shmsg_get>
 54e:	1c04      	adds	r4, r0, #0
 550:	3800      	subs	r0, #0
 552:	d03d      	beq.n	5d0 <SPARE_SIZE+0x30>
 554:	1c29      	adds	r1, r5, #0
 556:	f7ff ee70 	blx	238 <sark_msg_cpy>
 55a:	4e1e      	ldr	r6, [pc, #120]	; (5d4 <SPARE_SIZE+0x34>)
 55c:	2501      	movs	r5, #1
 55e:	69f3      	ldr	r3, [r6, #28]
 560:	1c28      	adds	r0, r5, #0
 562:	635c      	str	r4, [r3, #52]	; 0x34
 564:	3339      	adds	r3, #57	; 0x39
 566:	701d      	strb	r5, [r3, #0]
 568:	f7ff ee2e 	blx	1c8 <sark_lock_get>
 56c:	6831      	ldr	r1, [r6, #0]
 56e:	4a1a      	ldr	r2, [pc, #104]	; (5d8 <SPARE_SIZE+0x38>)
 570:	1c2e      	adds	r6, r5, #0
 572:	6813      	ldr	r3, [r2, #0]
 574:	408e      	lsls	r6, r1
 576:	1c31      	adds	r1, r6, #0
 578:	4319      	orrs	r1, r3
 57a:	6011      	str	r1, [r2, #0]
 57c:	2b00      	cmp	r3, #0
 57e:	d106      	bne.n	58e <sark_msg_send+0x4a>
 580:	4b16      	ldr	r3, [pc, #88]	; (5dc <SPARE_SIZE+0x3c>)
 582:	4a17      	ldr	r2, [pc, #92]	; (5e0 <SPARE_SIZE+0x40>)
 584:	781b      	ldrb	r3, [r3, #0]
 586:	409d      	lsls	r5, r3
 588:	4b16      	ldr	r3, [pc, #88]	; (5e4 <SPARE_SIZE+0x44>)
 58a:	18ad      	adds	r5, r5, r2
 58c:	601d      	str	r5, [r3, #0]
 58e:	2101      	movs	r1, #1
 590:	f7ff ee2c 	blx	1ec <sark_lock_free>
 594:	4b0f      	ldr	r3, [pc, #60]	; (5d4 <SPARE_SIZE+0x34>)
 596:	4a14      	ldr	r2, [pc, #80]	; (5e8 <SPARE_SIZE+0x48>)
 598:	69db      	ldr	r3, [r3, #28]
 59a:	6815      	ldr	r5, [r2, #0]
 59c:	1c18      	adds	r0, r3, #0
 59e:	3039      	adds	r0, #57	; 0x39
 5a0:	e008      	b.n	5b4 <SPARE_SIZE+0x14>
 5a2:	6811      	ldr	r1, [r2, #0]
 5a4:	1b49      	subs	r1, r1, r5
 5a6:	42b9      	cmp	r1, r7
 5a8:	d904      	bls.n	5b4 <SPARE_SIZE+0x14>
 5aa:	3339      	adds	r3, #57	; 0x39
 5ac:	781b      	ldrb	r3, [r3, #0]
 5ae:	2b00      	cmp	r3, #0
 5b0:	d009      	beq.n	5c6 <SPARE_SIZE+0x26>
 5b2:	e003      	b.n	5bc <SPARE_SIZE+0x1c>
 5b4:	7801      	ldrb	r1, [r0, #0]
 5b6:	2900      	cmp	r1, #0
 5b8:	d1f3      	bne.n	5a2 <SPARE_SIZE+0x2>
 5ba:	e7f6      	b.n	5aa <SPARE_SIZE+0xa>
 5bc:	1c20      	adds	r0, r4, #0
 5be:	f7ff ff31 	bl	424 <sark_shmsg_free>
 5c2:	2000      	movs	r0, #0
 5c4:	e004      	b.n	5d0 <SPARE_SIZE+0x30>
 5c6:	4b03      	ldr	r3, [pc, #12]	; (5d4 <SPARE_SIZE+0x34>)
 5c8:	2001      	movs	r0, #1
 5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 5cc:	3201      	adds	r2, #1
 5ce:	62da      	str	r2, [r3, #44]	; 0x2c
 5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 5d2:	46c0      	nop			; (mov r8, r8)
 5d4:	0040032c 	.word	0x0040032c
 5d8:	e5007fec 	.word	0xe5007fec
 5dc:	e5007fa8 	.word	0xe5007fa8
 5e0:	5ec00000 	.word	0x5ec00000
 5e4:	e2000008 	.word	0xe2000008
 5e8:	e5007f10 	.word	0xe5007f10

000005ec <sark_cmd_ver>:
 5ec:	b508      	push	{r3, lr}
 5ee:	4b0a      	ldr	r3, [pc, #40]	; (618 <ETH_TX_SIZE+0x18>)
 5f0:	6859      	ldr	r1, [r3, #4]
 5f2:	681b      	ldr	r3, [r3, #0]
 5f4:	020a      	lsls	r2, r1, #8
 5f6:	18d3      	adds	r3, r2, r3
 5f8:	4a08      	ldr	r2, [pc, #32]	; (61c <ETH_TX_SIZE+0x1c>)
 5fa:	4909      	ldr	r1, [pc, #36]	; (620 <ETH_TX_SIZE+0x20>)
 5fc:	8812      	ldrh	r2, [r2, #0]
 5fe:	0412      	lsls	r2, r2, #16
 600:	189b      	adds	r3, r3, r2
 602:	6143      	str	r3, [r0, #20]
 604:	4b07      	ldr	r3, [pc, #28]	; (624 <ETH_TX_SIZE+0x24>)
 606:	6183      	str	r3, [r0, #24]
 608:	4b07      	ldr	r3, [pc, #28]	; (628 <ETH_TX_SIZE+0x28>)
 60a:	681b      	ldr	r3, [r3, #0]
 60c:	61c3      	str	r3, [r0, #28]
 60e:	3020      	adds	r0, #32
 610:	f7ff edf6 	blx	200 <sark_str_cpy>
 614:	201b      	movs	r0, #27
 616:	bd08      	pop	{r3, pc}
 618:	0040032c 	.word	0x0040032c
 61c:	e5007f00 	.word	0xe5007f00
 620:	00000b88 	.word	0x00000b88
 624:	00820100 	.word	0x00820100
 628:	00000b84 	.word	0x00000b84

0000062c <sark_cmd_read>:
 62c:	69c1      	ldr	r1, [r0, #28]
 62e:	b530      	push	{r4, r5, lr}
 630:	6983      	ldr	r3, [r0, #24]
 632:	2902      	cmp	r1, #2
 634:	d803      	bhi.n	63e <sark_cmd_read+0x12>
 636:	2280      	movs	r2, #128	; 0x80
 638:	0052      	lsls	r2, r2, #1
 63a:	429a      	cmp	r2, r3
 63c:	d203      	bcs.n	646 <sark_cmd_read+0x1a>
 63e:	2384      	movs	r3, #132	; 0x84
 640:	8203      	strh	r3, [r0, #16]
 642:	2300      	movs	r3, #0
 644:	e023      	b.n	68e <ZI_LENGTH+0x2>
 646:	6942      	ldr	r2, [r0, #20]
 648:	3014      	adds	r0, #20
 64a:	2900      	cmp	r1, #0
 64c:	d108      	bne.n	660 <sark_cmd_read+0x34>
 64e:	18d1      	adds	r1, r2, r3
 650:	1a80      	subs	r0, r0, r2
 652:	e002      	b.n	65a <sark_cmd_read+0x2e>
 654:	7814      	ldrb	r4, [r2, #0]
 656:	5484      	strb	r4, [r0, r2]
 658:	3201      	adds	r2, #1
 65a:	428a      	cmp	r2, r1
 65c:	d1fa      	bne.n	654 <sark_cmd_read+0x28>
 65e:	e016      	b.n	68e <ZI_LENGTH+0x2>
 660:	2901      	cmp	r1, #1
 662:	d10a      	bne.n	67a <sark_cmd_read+0x4e>
 664:	0859      	lsrs	r1, r3, #1
 666:	0049      	lsls	r1, r1, #1
 668:	1889      	adds	r1, r1, r2
 66a:	1a80      	subs	r0, r0, r2
 66c:	e002      	b.n	674 <sark_cmd_read+0x48>
 66e:	8814      	ldrh	r4, [r2, #0]
 670:	5284      	strh	r4, [r0, r2]
 672:	3202      	adds	r2, #2
 674:	428a      	cmp	r2, r1
 676:	d1fa      	bne.n	66e <sark_cmd_read+0x42>
 678:	e009      	b.n	68e <ZI_LENGTH+0x2>
 67a:	089c      	lsrs	r4, r3, #2
 67c:	00a4      	lsls	r4, r4, #2
 67e:	1904      	adds	r4, r0, r4
 680:	1c01      	adds	r1, r0, #0
 682:	e002      	b.n	68a <sark_cmd_read+0x5e>
 684:	1a0d      	subs	r5, r1, r0
 686:	58ad      	ldr	r5, [r5, r2]
 688:	c120      	stmia	r1!, {r5}
 68a:	42a1      	cmp	r1, r4
 68c:	d1fa      	bne.n	684 <sark_cmd_read+0x58>
 68e:	1c18      	adds	r0, r3, #0
 690:	bd30      	pop	{r4, r5, pc}

00000692 <sark_cmd_write>:
 692:	69c1      	ldr	r1, [r0, #28]
 694:	b530      	push	{r4, r5, lr}
 696:	6982      	ldr	r2, [r0, #24]
 698:	2902      	cmp	r1, #2
 69a:	d803      	bhi.n	6a4 <sark_cmd_write+0x12>
 69c:	2380      	movs	r3, #128	; 0x80
 69e:	005b      	lsls	r3, r3, #1
 6a0:	4293      	cmp	r3, r2
 6a2:	d202      	bcs.n	6aa <sark_cmd_write+0x18>
 6a4:	2384      	movs	r3, #132	; 0x84
 6a6:	8203      	strh	r3, [r0, #16]
 6a8:	e026      	b.n	6f8 <sark_cmd_write+0x66>
 6aa:	6943      	ldr	r3, [r0, #20]
 6ac:	2900      	cmp	r1, #0
 6ae:	d10b      	bne.n	6c8 <sark_cmd_write+0x36>
 6b0:	1881      	adds	r1, r0, r2
 6b2:	1c02      	adds	r2, r0, #0
 6b4:	e005      	b.n	6c2 <sark_cmd_write+0x30>
 6b6:	1c14      	adds	r4, r2, #0
 6b8:	3420      	adds	r4, #32
 6ba:	7825      	ldrb	r5, [r4, #0]
 6bc:	1a14      	subs	r4, r2, r0
 6be:	3201      	adds	r2, #1
 6c0:	54e5      	strb	r5, [r4, r3]
 6c2:	428a      	cmp	r2, r1
 6c4:	d1f7      	bne.n	6b6 <sark_cmd_write+0x24>
 6c6:	e017      	b.n	6f8 <sark_cmd_write+0x66>
 6c8:	3020      	adds	r0, #32
 6ca:	2901      	cmp	r1, #1
 6cc:	d10b      	bne.n	6e6 <sark_cmd_write+0x54>
 6ce:	0851      	lsrs	r1, r2, #1
 6d0:	0049      	lsls	r1, r1, #1
 6d2:	1841      	adds	r1, r0, r1
 6d4:	1c02      	adds	r2, r0, #0
 6d6:	e003      	b.n	6e0 <sark_cmd_write+0x4e>
 6d8:	8815      	ldrh	r5, [r2, #0]
 6da:	1a14      	subs	r4, r2, r0
 6dc:	3202      	adds	r2, #2
 6de:	52e5      	strh	r5, [r4, r3]
 6e0:	428a      	cmp	r2, r1
 6e2:	d1f9      	bne.n	6d8 <sark_cmd_write+0x46>
 6e4:	e008      	b.n	6f8 <sark_cmd_write+0x66>
 6e6:	0892      	lsrs	r2, r2, #2
 6e8:	0092      	lsls	r2, r2, #2
 6ea:	18d2      	adds	r2, r2, r3
 6ec:	1ac0      	subs	r0, r0, r3
 6ee:	e001      	b.n	6f4 <sark_cmd_write+0x62>
 6f0:	58c1      	ldr	r1, [r0, r3]
 6f2:	c302      	stmia	r3!, {r1}
 6f4:	4293      	cmp	r3, r2
 6f6:	d1fb      	bne.n	6f0 <sark_cmd_write+0x5e>
 6f8:	2000      	movs	r0, #0
 6fa:	bd30      	pop	{r4, r5, pc}

000006fc <sark_cmd_fill>:
 6fc:	b508      	push	{r3, lr}
 6fe:	1c03      	adds	r3, r0, #0
 700:	3314      	adds	r3, #20
 702:	cb07      	ldmia	r3!, {r0, r1, r2}
 704:	f7ff ed86 	blx	214 <sark_word_set>
 708:	2000      	movs	r0, #0
 70a:	bd08      	pop	{r3, pc}

0000070c <sark_wait>:
 70c:	b508      	push	{r3, lr}
 70e:	e001      	b.n	714 <sark_wait+0x8>
 710:	f7ff ed56 	blx	1c0 <cpu_wfi>
 714:	235d      	movs	r3, #93	; 0x5d
 716:	781b      	ldrb	r3, [r3, #0]
 718:	07da      	lsls	r2, r3, #31
 71a:	d4f9      	bmi.n	710 <sark_wait+0x4>
 71c:	bd08      	pop	{r3, pc}
	...

00000720 <sark_int>:
 720:	4b55      	ldr	r3, [pc, #340]	; (878 <STACK_SIZE+0x78>)
 722:	2101      	movs	r1, #1
 724:	685a      	ldr	r2, [r3, #4]
 726:	b570      	push	{r4, r5, r6, lr}
 728:	4091      	lsls	r1, r2
 72a:	4a54      	ldr	r2, [pc, #336]	; (87c <STACK_SIZE+0x7c>)
 72c:	1889      	adds	r1, r1, r2
 72e:	4a54      	ldr	r2, [pc, #336]	; (880 <STACK_SIZE+0x80>)
 730:	6011      	str	r1, [r2, #0]
 732:	69da      	ldr	r2, [r3, #28]
 734:	1c11      	adds	r1, r2, #0
 736:	3138      	adds	r1, #56	; 0x38
 738:	780b      	ldrb	r3, [r1, #0]
 73a:	2b00      	cmp	r3, #0
 73c:	d100      	bne.n	740 <sark_int+0x20>
 73e:	e099      	b.n	874 <STACK_SIZE+0x74>
 740:	6b15      	ldr	r5, [r2, #48]	; 0x30
 742:	2b02      	cmp	r3, #2
 744:	d100      	bne.n	748 <sark_int+0x28>
 746:	6310      	str	r0, [r2, #48]	; 0x30
 748:	2200      	movs	r2, #0
 74a:	700a      	strb	r2, [r1, #0]
 74c:	2b03      	cmp	r3, #3
 74e:	d124      	bne.n	79a <sark_int+0x7a>
 750:	1ee8      	subs	r0, r5, #3
 752:	280a      	cmp	r0, #10
 754:	d900      	bls.n	758 <sark_int+0x38>
 756:	e08d      	b.n	874 <STACK_SIZE+0x74>
 758:	f7ff fdbc 	bl	2d4 <__gnu_thumb1_case_uqi>
 75c:	068c8c10 	.word	0x068c8c10
 760:	161b0c08 	.word	0x161b0c08
 764:	1616      	.short	0x1616
 766:	16          	.byte	0x16
 767:	00          	.byte	0x00
 768:	2001      	movs	r0, #1
 76a:	e000      	b.n	76e <sark_int+0x4e>
 76c:	2000      	movs	r0, #0
 76e:	f000 f891 	bl	894 <event_pause>
 772:	e07f      	b.n	874 <STACK_SIZE+0x74>
 774:	20ff      	movs	r0, #255	; 0xff
 776:	f000 f8a3 	bl	8c0 <event_stop>
 77a:	e07b      	b.n	874 <STACK_SIZE+0x74>
 77c:	235d      	movs	r3, #93	; 0x5d
 77e:	781a      	ldrb	r2, [r3, #0]
 780:	2101      	movs	r1, #1
 782:	438a      	bics	r2, r1
 784:	701a      	strb	r2, [r3, #0]
 786:	e075      	b.n	874 <STACK_SIZE+0x74>
 788:	4b3e      	ldr	r3, [pc, #248]	; (884 <STACK_SIZE+0x84>)
 78a:	2280      	movs	r2, #128	; 0x80
 78c:	62dd      	str	r5, [r3, #44]	; 0x2c
 78e:	0592      	lsls	r2, r2, #22
 790:	e000      	b.n	794 <sark_int+0x74>
 792:	2210      	movs	r2, #16
 794:	4b3c      	ldr	r3, [pc, #240]	; (888 <STACK_SIZE+0x88>)
 796:	601a      	str	r2, [r3, #0]
 798:	e06c      	b.n	874 <STACK_SIZE+0x74>
 79a:	2b01      	cmp	r3, #1
 79c:	d16a      	bne.n	874 <STACK_SIZE+0x74>
 79e:	f7ff fdff 	bl	3a0 <sark_msg_get>
 7a2:	1e04      	subs	r4, r0, #0
 7a4:	d063      	beq.n	86e <STACK_SIZE+0x6e>
 7a6:	1c29      	adds	r1, r5, #0
 7a8:	1c20      	adds	r0, r4, #0
 7aa:	f7ff ed46 	blx	238 <sark_msg_cpy>
 7ae:	1c28      	adds	r0, r5, #0
 7b0:	f7ff fe38 	bl	424 <sark_shmsg_free>
 7b4:	4b30      	ldr	r3, [pc, #192]	; (878 <STACK_SIZE+0x78>)
 7b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 7b8:	3201      	adds	r2, #1
 7ba:	629a      	str	r2, [r3, #40]	; 0x28
 7bc:	7aa5      	ldrb	r5, [r4, #10]
 7be:	231f      	movs	r3, #31
 7c0:	1c28      	adds	r0, r5, #0
 7c2:	4398      	bics	r0, r3
 7c4:	d130      	bne.n	828 <STACK_SIZE+0x28>
 7c6:	88a3      	ldrh	r3, [r4, #4]
 7c8:	2b17      	cmp	r3, #23
 7ca:	d801      	bhi.n	7d0 <sark_int+0xb0>
 7cc:	2381      	movs	r3, #129	; 0x81
 7ce:	e01b      	b.n	808 <STACK_SIZE+0x8>
 7d0:	8a23      	ldrh	r3, [r4, #16]
 7d2:	2280      	movs	r2, #128	; 0x80
 7d4:	8222      	strh	r2, [r4, #16]
 7d6:	2b00      	cmp	r3, #0
 7d8:	d103      	bne.n	7e2 <sark_int+0xc2>
 7da:	1c20      	adds	r0, r4, #0
 7dc:	f7ff ff06 	bl	5ec <sark_cmd_ver>
 7e0:	e013      	b.n	80a <STACK_SIZE+0xa>
 7e2:	2b02      	cmp	r3, #2
 7e4:	d103      	bne.n	7ee <sark_int+0xce>
 7e6:	1c20      	adds	r0, r4, #0
 7e8:	f7ff ff20 	bl	62c <sark_cmd_read>
 7ec:	e00d      	b.n	80a <STACK_SIZE+0xa>
 7ee:	2b03      	cmp	r3, #3
 7f0:	d103      	bne.n	7fa <sark_int+0xda>
 7f2:	1c20      	adds	r0, r4, #0
 7f4:	f7ff ff4d 	bl	692 <sark_cmd_write>
 7f8:	e007      	b.n	80a <STACK_SIZE+0xa>
 7fa:	2b05      	cmp	r3, #5
 7fc:	d103      	bne.n	806 <STACK_SIZE+0x6>
 7fe:	1c20      	adds	r0, r4, #0
 800:	f7ff ff7c 	bl	6fc <sark_cmd_fill>
 804:	e001      	b.n	80a <STACK_SIZE+0xa>
 806:	2383      	movs	r3, #131	; 0x83
 808:	8223      	strh	r3, [r4, #16]
 80a:	7aa2      	ldrb	r2, [r4, #10]
 80c:	7ae1      	ldrb	r1, [r4, #11]
 80e:	89a3      	ldrh	r3, [r4, #12]
 810:	300c      	adds	r0, #12
 812:	72e2      	strb	r2, [r4, #11]
 814:	89e2      	ldrh	r2, [r4, #14]
 816:	80a0      	strh	r0, [r4, #4]
 818:	72a1      	strb	r1, [r4, #10]
 81a:	81a2      	strh	r2, [r4, #12]
 81c:	81e3      	strh	r3, [r4, #14]
 81e:	1c20      	adds	r0, r4, #0
 820:	210a      	movs	r1, #10
 822:	f7ff fe8f 	bl	544 <sark_msg_send>
 826:	e01e      	b.n	866 <STACK_SIZE+0x66>
 828:	235b      	movs	r3, #91	; 0x5b
 82a:	781b      	ldrb	r3, [r3, #0]
 82c:	2b00      	cmp	r3, #0
 82e:	d00f      	beq.n	850 <STACK_SIZE+0x50>
 830:	4b16      	ldr	r3, [pc, #88]	; (88c <STACK_SIZE+0x8c>)
 832:	699b      	ldr	r3, [r3, #24]
 834:	2b00      	cmp	r3, #0
 836:	d016      	beq.n	866 <STACK_SIZE+0x66>
 838:	f7ff ecb6 	blx	1a8 <cpu_int_disable>
 83c:	096a      	lsrs	r2, r5, #5
 83e:	1c21      	adds	r1, r4, #0
 840:	1c06      	adds	r6, r0, #0
 842:	2003      	movs	r0, #3
 844:	f000 f948 	bl	ad8 <schedule_sysmode>
 848:	1c30      	adds	r0, r6, #0
 84a:	f7ff ecb6 	blx	1b8 <cpu_int_restore>
 84e:	e011      	b.n	874 <STACK_SIZE+0x74>
 850:	4b0f      	ldr	r3, [pc, #60]	; (890 <STACK_SIZE+0x90>)
 852:	681a      	ldr	r2, [r3, #0]
 854:	2380      	movs	r3, #128	; 0x80
 856:	055b      	lsls	r3, r3, #21
 858:	421a      	tst	r2, r3
 85a:	d004      	beq.n	866 <STACK_SIZE+0x66>
 85c:	4a09      	ldr	r2, [pc, #36]	; (884 <STACK_SIZE+0x84>)
 85e:	6294      	str	r4, [r2, #40]	; 0x28
 860:	4a09      	ldr	r2, [pc, #36]	; (888 <STACK_SIZE+0x88>)
 862:	6013      	str	r3, [r2, #0]
 864:	e006      	b.n	874 <STACK_SIZE+0x74>
 866:	1c20      	adds	r0, r4, #0
 868:	f7ff fdb2 	bl	3d0 <sark_msg_free>
 86c:	e002      	b.n	874 <STACK_SIZE+0x74>
 86e:	1c28      	adds	r0, r5, #0
 870:	f7ff fdd8 	bl	424 <sark_shmsg_free>
 874:	bd70      	pop	{r4, r5, r6, pc}
 876:	46c0      	nop			; (mov r8, r8)
 878:	0040032c 	.word	0x0040032c
 87c:	5ec00000 	.word	0x5ec00000
 880:	e200000c 	.word	0xe200000c
 884:	00400368 	.word	0x00400368
 888:	2f000018 	.word	0x2f000018
 88c:	00400594 	.word	0x00400594
 890:	2f000010 	.word	0x2f000010

00000894 <event_pause>:
 894:	b538      	push	{r3, r4, r5, lr}
 896:	1c05      	adds	r5, r0, #0
 898:	4c08      	ldr	r4, [pc, #32]	; (8bc <event_pause+0x28>)
 89a:	2800      	cmp	r0, #0
 89c:	d003      	beq.n	8a6 <event_pause+0x12>
 89e:	2301      	movs	r3, #1
 8a0:	7623      	strb	r3, [r4, #24]
 8a2:	200a      	movs	r0, #10
 8a4:	e001      	b.n	8aa <event_pause+0x16>
 8a6:	7620      	strb	r0, [r4, #24]
 8a8:	2007      	movs	r0, #7
 8aa:	f7ff fd57 	bl	35c <sark_cpu_state>
 8ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8b0:	2b00      	cmp	r3, #0
 8b2:	d002      	beq.n	8ba <event_pause+0x26>
 8b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8b6:	1c28      	adds	r0, r5, #0
 8b8:	4798      	blx	r3
 8ba:	bd38      	pop	{r3, r4, r5, pc}
 8bc:	00400368 	.word	0x00400368

000008c0 <event_stop>:
 8c0:	4b03      	ldr	r3, [pc, #12]	; (8d0 <event_stop+0x10>)
 8c2:	2202      	movs	r2, #2
 8c4:	761a      	strb	r2, [r3, #24]
 8c6:	4a03      	ldr	r2, [pc, #12]	; (8d4 <event_stop+0x14>)
 8c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8ca:	6011      	str	r1, [r2, #0]
 8cc:	6398      	str	r0, [r3, #56]	; 0x38
 8ce:	4770      	bx	lr
 8d0:	00400368 	.word	0x00400368
 8d4:	2f000014 	.word	0x2f000014

000008d8 <event_alloc>:
 8d8:	b570      	push	{r4, r5, r6, lr}
 8da:	2118      	movs	r1, #24
 8dc:	1c06      	adds	r6, r0, #0
 8de:	f000 f8dd 	bl	a9c <sark_alloc>
 8e2:	4d0b      	ldr	r5, [pc, #44]	; (910 <event_alloc+0x38>)
 8e4:	1e04      	subs	r4, r0, #0
 8e6:	d00d      	beq.n	904 <event_alloc+0x2c>
 8e8:	1c31      	adds	r1, r6, #0
 8ea:	2218      	movs	r2, #24
 8ec:	f7ff fd48 	bl	380 <sark_block_init>
 8f0:	1c06      	adds	r6, r0, #0
 8f2:	f7ff ec5a 	blx	1a8 <cpu_int_disable>
 8f6:	682a      	ldr	r2, [r5, #0]
 8f8:	6032      	str	r2, [r6, #0]
 8fa:	602c      	str	r4, [r5, #0]
 8fc:	f7ff ec5c 	blx	1b8 <cpu_int_restore>
 900:	2001      	movs	r0, #1
 902:	e003      	b.n	90c <event_alloc+0x34>
 904:	696a      	ldr	r2, [r5, #20]
 906:	2308      	movs	r3, #8
 908:	4313      	orrs	r3, r2
 90a:	616b      	str	r3, [r5, #20]
 90c:	bd70      	pop	{r4, r5, r6, pc}
 90e:	46c0      	nop			; (mov r8, r8)
 910:	00400368 	.word	0x00400368

00000914 <sark_vic_init>:
 914:	4b0b      	ldr	r3, [pc, #44]	; (944 <sark_vic_init+0x30>)
 916:	2201      	movs	r2, #1
 918:	4252      	negs	r2, r2
 91a:	b510      	push	{r4, lr}
 91c:	601a      	str	r2, [r3, #0]
 91e:	4b0a      	ldr	r3, [pc, #40]	; (948 <sark_vic_init+0x34>)
 920:	2200      	movs	r2, #0
 922:	601a      	str	r2, [r3, #0]
 924:	4b09      	ldr	r3, [pc, #36]	; (94c <sark_vic_init+0x38>)
 926:	4c0a      	ldr	r4, [pc, #40]	; (950 <sark_vic_init+0x3c>)
 928:	601a      	str	r2, [r3, #0]
 92a:	490a      	ldr	r1, [pc, #40]	; (954 <sark_vic_init+0x40>)
 92c:	4b0a      	ldr	r3, [pc, #40]	; (958 <sark_vic_init+0x44>)
 92e:	1e58      	subs	r0, r3, #1
 930:	601a      	str	r2, [r3, #0]
 932:	38ff      	subs	r0, #255	; 0xff
 934:	3304      	adds	r3, #4
 936:	6004      	str	r4, [r0, #0]
 938:	428b      	cmp	r3, r1
 93a:	d1f8      	bne.n	92e <sark_vic_init+0x1a>
 93c:	4b07      	ldr	r3, [pc, #28]	; (95c <sark_vic_init+0x48>)
 93e:	4a08      	ldr	r2, [pc, #32]	; (960 <sark_vic_init+0x4c>)
 940:	601a      	str	r2, [r3, #0]
 942:	bd10      	pop	{r4, pc}
 944:	2f000014 	.word	0x2f000014
 948:	2f00000c 	.word	0x2f00000c
 94c:	2f000030 	.word	0x2f000030
 950:	00000108 	.word	0x00000108
 954:	2f000240 	.word	0x2f000240
 958:	2f000200 	.word	0x2f000200
 95c:	2f000034 	.word	0x2f000034
 960:	000002cc 	.word	0x000002cc

00000964 <sark_vic_set>:
 964:	b530      	push	{r4, r5, lr}
 966:	2810      	cmp	r0, #16
 968:	d106      	bne.n	978 <sark_vic_set+0x14>
 96a:	2020      	movs	r0, #32
 96c:	61c3      	str	r3, [r0, #28]
 96e:	2001      	movs	r0, #1
 970:	4b0a      	ldr	r3, [pc, #40]	; (99c <sark_vic_set+0x38>)
 972:	4088      	lsls	r0, r1
 974:	6018      	str	r0, [r3, #0]
 976:	e009      	b.n	98c <sark_vic_set+0x28>
 978:	4d09      	ldr	r5, [pc, #36]	; (9a0 <sark_vic_set+0x3c>)
 97a:	0084      	lsls	r4, r0, #2
 97c:	1964      	adds	r4, r4, r5
 97e:	6023      	str	r3, [r4, #0]
 980:	4b08      	ldr	r3, [pc, #32]	; (9a4 <sark_vic_set+0x40>)
 982:	0080      	lsls	r0, r0, #2
 984:	18c0      	adds	r0, r0, r3
 986:	2320      	movs	r3, #32
 988:	430b      	orrs	r3, r1
 98a:	6003      	str	r3, [r0, #0]
 98c:	2a00      	cmp	r2, #0
 98e:	d004      	beq.n	99a <sark_vic_set+0x36>
 990:	2301      	movs	r3, #1
 992:	408b      	lsls	r3, r1
 994:	1c19      	adds	r1, r3, #0
 996:	4b04      	ldr	r3, [pc, #16]	; (9a8 <sark_vic_set+0x44>)
 998:	6019      	str	r1, [r3, #0]
 99a:	bd30      	pop	{r4, r5, pc}
 99c:	2f00000c 	.word	0x2f00000c
 9a0:	2f000100 	.word	0x2f000100
 9a4:	2f000200 	.word	0x2f000200
 9a8:	2f000010 	.word	0x2f000010

000009ac <sark_fiq_han>:
 9ac:	e92d000c 	push	{r2, r3}
 9b0:	e3a03202 	mov	r3, #536870912	; 0x20000000
 9b4:	e5933014 	ldr	r3, [r3, #20]
 9b8:	e59f3010 	ldr	r3, [pc, #16]	; 9d0 <sark_fiq_han+0x24>
 9bc:	e5932038 	ldr	r2, [r3, #56]	; 0x38
 9c0:	e2822001 	add	r2, r2, #1
 9c4:	e5832038 	str	r2, [r3, #56]	; 0x38
 9c8:	e8bd000c 	pop	{r2, r3}
 9cc:	e25ef004 	subs	pc, lr, #4
 9d0:	0040032c 	.word	0x0040032c

000009d4 <sark_xalloc>:
 9d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 9d6:	1c07      	adds	r7, r0, #0
 9d8:	1c15      	adds	r5, r2, #0
 9da:	2aff      	cmp	r2, #255	; 0xff
 9dc:	d858      	bhi.n	a90 <sark_xalloc+0xbc>
 9de:	2900      	cmp	r1, #0
 9e0:	d100      	bne.n	9e4 <sark_xalloc+0x10>
 9e2:	e055      	b.n	a90 <sark_xalloc+0xbc>
 9e4:	0a1e      	lsrs	r6, r3, #8
 9e6:	0798      	lsls	r0, r3, #30
 9e8:	d401      	bmi.n	9ee <sark_xalloc+0x1a>
 9ea:	225c      	movs	r2, #92	; 0x5c
 9ec:	7816      	ldrb	r6, [r2, #0]
 9ee:	0236      	lsls	r6, r6, #8
 9f0:	1976      	adds	r6, r6, r5
 9f2:	2d00      	cmp	r5, #0
 9f4:	d005      	beq.n	a02 <sark_xalloc+0x2e>
 9f6:	4a27      	ldr	r2, [pc, #156]	; (a94 <sark_xalloc+0xc0>)
 9f8:	00b0      	lsls	r0, r6, #2
 9fa:	6812      	ldr	r2, [r2, #0]
 9fc:	5882      	ldr	r2, [r0, r2]
 9fe:	2a00      	cmp	r2, #0
 a00:	d146      	bne.n	a90 <sark_xalloc+0xbc>
 a02:	2203      	movs	r2, #3
 a04:	3103      	adds	r1, #3
 a06:	4391      	bics	r1, r2
 a08:	2201      	movs	r2, #1
 a0a:	3108      	adds	r1, #8
 a0c:	4013      	ands	r3, r2
 a0e:	9101      	str	r1, [sp, #4]
 a10:	9300      	str	r3, [sp, #0]
 a12:	d003      	beq.n	a1c <sark_xalloc+0x48>
 a14:	2006      	movs	r0, #6
 a16:	f7ff ebd8 	blx	1c8 <sark_lock_get>
 a1a:	4684      	mov	ip, r0
 a1c:	683c      	ldr	r4, [r7, #0]
 a1e:	2200      	movs	r2, #0
 a20:	e02d      	b.n	a7e <sark_xalloc+0xaa>
 a22:	9801      	ldr	r0, [sp, #4]
 a24:	6821      	ldr	r1, [r4, #0]
 a26:	1823      	adds	r3, r4, r0
 a28:	42a3      	cmp	r3, r4
 a2a:	d92a      	bls.n	a82 <sark_xalloc+0xae>
 a2c:	428b      	cmp	r3, r1
 a2e:	d902      	bls.n	a36 <sark_xalloc+0x62>
 a30:	1c22      	adds	r2, r4, #0
 a32:	6864      	ldr	r4, [r4, #4]
 a34:	e023      	b.n	a7e <sark_xalloc+0xaa>
 a36:	1c18      	adds	r0, r3, #0
 a38:	3008      	adds	r0, #8
 a3a:	4281      	cmp	r1, r0
 a3c:	d904      	bls.n	a48 <sark_xalloc+0x74>
 a3e:	6019      	str	r1, [r3, #0]
 a40:	6861      	ldr	r1, [r4, #4]
 a42:	6059      	str	r1, [r3, #4]
 a44:	6023      	str	r3, [r4, #0]
 a46:	6063      	str	r3, [r4, #4]
 a48:	6863      	ldr	r3, [r4, #4]
 a4a:	2a00      	cmp	r2, #0
 a4c:	d001      	beq.n	a52 <sark_xalloc+0x7e>
 a4e:	6053      	str	r3, [r2, #4]
 a50:	e000      	b.n	a54 <sark_xalloc+0x80>
 a52:	603b      	str	r3, [r7, #0]
 a54:	9a00      	ldr	r2, [sp, #0]
 a56:	2a00      	cmp	r2, #0
 a58:	d003      	beq.n	a62 <sark_xalloc+0x8e>
 a5a:	4660      	mov	r0, ip
 a5c:	2106      	movs	r1, #6
 a5e:	f7ff ebc6 	blx	1ec <sark_lock_free>
 a62:	480d      	ldr	r0, [pc, #52]	; (a98 <sark_xalloc+0xc4>)
 a64:	1833      	adds	r3, r6, r0
 a66:	6063      	str	r3, [r4, #4]
 a68:	2d00      	cmp	r5, #0
 a6a:	d005      	beq.n	a78 <sark_xalloc+0xa4>
 a6c:	4b09      	ldr	r3, [pc, #36]	; (a94 <sark_xalloc+0xc0>)
 a6e:	1c22      	adds	r2, r4, #0
 a70:	681b      	ldr	r3, [r3, #0]
 a72:	00b6      	lsls	r6, r6, #2
 a74:	3208      	adds	r2, #8
 a76:	50f2      	str	r2, [r6, r3]
 a78:	1c20      	adds	r0, r4, #0
 a7a:	3008      	adds	r0, #8
 a7c:	e009      	b.n	a92 <sark_xalloc+0xbe>
 a7e:	2c00      	cmp	r4, #0
 a80:	d1cf      	bne.n	a22 <sark_xalloc+0x4e>
 a82:	9900      	ldr	r1, [sp, #0]
 a84:	2900      	cmp	r1, #0
 a86:	d003      	beq.n	a90 <sark_xalloc+0xbc>
 a88:	4660      	mov	r0, ip
 a8a:	2106      	movs	r1, #6
 a8c:	f7ff ebae 	blx	1ec <sark_lock_free>
 a90:	2000      	movs	r0, #0
 a92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 a94:	e5007fdc 	.word	0xe5007fdc
 a98:	ffff0000 	.word	0xffff0000

00000a9c <sark_alloc>:
 a9c:	4a04      	ldr	r2, [pc, #16]	; (ab0 <sark_alloc+0x14>)
 a9e:	b508      	push	{r3, lr}
 aa0:	1c03      	adds	r3, r0, #0
 aa2:	6990      	ldr	r0, [r2, #24]
 aa4:	2200      	movs	r2, #0
 aa6:	4359      	muls	r1, r3
 aa8:	1c13      	adds	r3, r2, #0
 aaa:	f7ff ff93 	bl	9d4 <sark_xalloc>
 aae:	bd08      	pop	{r3, pc}
 ab0:	0040032c 	.word	0x0040032c

00000ab4 <sark_heap_init>:
 ab4:	1c03      	adds	r3, r0, #0
 ab6:	330c      	adds	r3, #12
 ab8:	3908      	subs	r1, #8
 aba:	6043      	str	r3, [r0, #4]
 abc:	6003      	str	r3, [r0, #0]
 abe:	2300      	movs	r3, #0
 ac0:	6081      	str	r1, [r0, #8]
 ac2:	60c1      	str	r1, [r0, #12]
 ac4:	6103      	str	r3, [r0, #16]
 ac6:	600b      	str	r3, [r1, #0]
 ac8:	604b      	str	r3, [r1, #4]
 aca:	4770      	bx	lr

00000acc <spin1_set_timer_tick>:
 acc:	4b01      	ldr	r3, [pc, #4]	; (ad4 <spin1_set_timer_tick+0x8>)
 ace:	6018      	str	r0, [r3, #0]
 ad0:	4770      	bx	lr
 ad2:	46c0      	nop			; (mov r8, r8)
 ad4:	00400008 	.word	0x00400008

00000ad8 <schedule_sysmode>:
 ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 ada:	4d15      	ldr	r5, [pc, #84]	; (b30 <schedule_sysmode+0x58>)
 adc:	00c6      	lsls	r6, r0, #3
 ade:	19ab      	adds	r3, r5, r6
 ae0:	685b      	ldr	r3, [r3, #4]
 ae2:	2b00      	cmp	r3, #0
 ae4:	dc04      	bgt.n	af0 <schedule_sysmode+0x18>
 ae6:	1c08      	adds	r0, r1, #0
 ae8:	5973      	ldr	r3, [r6, r5]
 aea:	1c11      	adds	r1, r2, #0
 aec:	4798      	blx	r3
 aee:	e01d      	b.n	b2c <schedule_sysmode+0x54>
 af0:	20c8      	movs	r0, #200	; 0xc8
 af2:	3b01      	subs	r3, #1
 af4:	4343      	muls	r3, r0
 af6:	480f      	ldr	r0, [pc, #60]	; (b34 <schedule_sysmode+0x5c>)
 af8:	18c3      	adds	r3, r0, r3
 afa:	685c      	ldr	r4, [r3, #4]
 afc:	200f      	movs	r0, #15
 afe:	1c67      	adds	r7, r4, #1
 b00:	4038      	ands	r0, r7
 b02:	681f      	ldr	r7, [r3, #0]
 b04:	42b8      	cmp	r0, r7
 b06:	d008      	beq.n	b1a <schedule_sysmode+0x42>
 b08:	270c      	movs	r7, #12
 b0a:	437c      	muls	r4, r7
 b0c:	5976      	ldr	r6, [r6, r5]
 b0e:	191c      	adds	r4, r3, r4
 b10:	60a6      	str	r6, [r4, #8]
 b12:	60e1      	str	r1, [r4, #12]
 b14:	6122      	str	r2, [r4, #16]
 b16:	6058      	str	r0, [r3, #4]
 b18:	e008      	b.n	b2c <schedule_sysmode+0x54>
 b1a:	4b07      	ldr	r3, [pc, #28]	; (b38 <schedule_sysmode+0x60>)
 b1c:	2201      	movs	r2, #1
 b1e:	6819      	ldr	r1, [r3, #0]
 b20:	430a      	orrs	r2, r1
 b22:	601a      	str	r2, [r3, #0]
 b24:	4b05      	ldr	r3, [pc, #20]	; (b3c <schedule_sysmode+0x64>)
 b26:	681a      	ldr	r2, [r3, #0]
 b28:	3201      	adds	r2, #1
 b2a:	601a      	str	r2, [r3, #0]
 b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 b2e:	46c0      	nop			; (mov r8, r8)
 b30:	00400594 	.word	0x00400594
 b34:	0040000c 	.word	0x0040000c
 b38:	00400000 	.word	0x00400000
 b3c:	00400004 	.word	0x00400004

00000b40 <sark_pre_main>:
 b40:	b508      	push	{r3, lr}
 b42:	2006      	movs	r0, #6
 b44:	f7ff fc0a 	bl	35c <sark_cpu_state>
 b48:	2201      	movs	r2, #1
 b4a:	235b      	movs	r3, #91	; 0x5b
 b4c:	701a      	strb	r2, [r3, #0]
 b4e:	f7ff fc0d 	bl	36c <sark_app_lead>
 b52:	4b04      	ldr	r3, [pc, #16]	; (b64 <sark_pre_main+0x24>)
 b54:	681b      	ldr	r3, [r3, #0]
 b56:	1ac2      	subs	r2, r0, r3
 b58:	4253      	negs	r3, r2
 b5a:	415a      	adcs	r2, r3
 b5c:	4b02      	ldr	r3, [pc, #8]	; (b68 <sark_pre_main+0x28>)
 b5e:	701a      	strb	r2, [r3, #0]
 b60:	bd08      	pop	{r3, pc}
 b62:	46c0      	nop			; (mov r8, r8)
 b64:	0040032c 	.word	0x0040032c
 b68:	00400438 	.word	0x00400438

00000b6c <sark_post_main>:
 b6c:	b508      	push	{r3, lr}
 b6e:	200b      	movs	r0, #11
 b70:	f7ff fbf4 	bl	35c <sark_cpu_state>
 b74:	bd08      	pop	{r3, pc}
	...

00000b78 <build_name>:
 b78:	7473 6572 7373 745f 7365 0074               stress_test.

00000b84 <build_date>:
 b84:	648a 53d2 4153 4b52 532f 6970 4e4e 6b61     .d.SSARK/SpiNNak
 b94:	7265 0800                                        er.
